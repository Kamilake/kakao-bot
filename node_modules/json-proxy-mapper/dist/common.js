"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayMapper = exports.ObjectMapper = exports.ObjectMapperBase = void 0;
const serializer_1 = require("./serializer");
class ObjectMapperBase {
}
exports.ObjectMapperBase = ObjectMapperBase;
class ObjectMapper extends ObjectMapperBase {
    constructor(mappings, convertMap = null) {
        super();
        this.mappings = mappings;
        this.convertMap = convertMap;
    }
    getMappingKeys() {
        return Reflect.ownKeys(this.mappings);
    }
    ownKeys(target) {
        return this.getMappingKeys();
    }
    getConverterFor(key) {
        if (this.convertMap && Reflect.has(this.convertMap, key)) {
            return Reflect.get(this.convertMap, key);
        }
        return null;
    }
    has(target, key) {
        let rawKey = this.getRawKey(key);
        if (!rawKey)
            return false;
        return Reflect.has(target, rawKey);
    }
    getRawKey(key) {
        if (Reflect.has(this.mappings, key))
            return Reflect.get(this.mappings, key);
        return null;
    }
    getOwnPropertyDescriptor(target, key) {
        let rawKey = this.getRawKey(key);
        if (rawKey) {
            return Reflect.getOwnPropertyDescriptor(target, rawKey);
        }
    }
    get(target, key, receiver) {
        if (!target)
            return;
        let rawKey = this.getRawKey(key);
        if (rawKey) {
            let converter = this.getConverterFor(key);
            if (converter && Reflect.has(target, rawKey)) {
                return converter.getFromRaw(target, rawKey, receiver);
            }
            return Reflect.get(target, rawKey, receiver);
        }
    }
    set(target, key, value, receiver) {
        if (!target)
            return false;
        let rawKey = this.getRawKey(key);
        if (rawKey) {
            let converter = this.getConverterFor(key);
            if (converter) {
                return converter.setToRaw(target, rawKey, value, receiver);
            }
            Reflect.set(target, rawKey, value, receiver);
            return Reflect.set(target, rawKey, value, receiver);
        }
        return false;
    }
}
exports.ObjectMapper = ObjectMapper;
class ArrayMapper extends ObjectMapperBase {
    constructor(objMappings, objConvertMap = null) {
        super();
        this.objMappings = objMappings;
        this.objConvertMap = objConvertMap;
        this.arrayMap = new WeakMap();
        this.objectMapper = new ObjectMapper(this.objMappings, this.objConvertMap);
    }
    get ObjectMapper() {
        return this.objectMapper;
    }
    getConverterFor(key) {
        return null;
    }
    getMappingKeys() {
        return [];
    }
    ownKeys(target) {
        return Reflect.ownKeys(target);
    }
    getRawKey(key) {
        return key;
    }
    has(target, key) {
        return Reflect.has(target, key);
    }
    isCoreKey(key) {
        return Reflect.ownKeys(Array.prototype).includes(key);
    }
    get(target, key, receiver) {
        if (!target)
            return;
        let val = Reflect.get(target, key, receiver);
        if (this.isCoreKey(key))
            return val;
        return this.getProxyFor(val);
    }
    set(target, key, value, receiver) {
        if (this.isCoreKey(key))
            return Reflect.set(target, key, value, receiver);
        return Reflect.set(target, key, serializer_1.Serializer.serialize(value, this.objectMapper), receiver);
    }
    getProxyFor(rawObj) {
        if (!rawObj)
            return null;
        if (this.arrayMap.has(rawObj))
            return this.arrayMap.get(rawObj);
        let converted = new Proxy(rawObj, this.objectMapper);
        this.arrayMap.set(rawObj, converted);
        return converted;
    }
}
exports.ArrayMapper = ArrayMapper;
//# sourceMappingURL=common.js.map