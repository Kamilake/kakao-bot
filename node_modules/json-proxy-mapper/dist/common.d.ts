export interface TypeConverter<T> {
    getFromRaw(target: any, rawKey: PropertyKey, receiver: any): T;
    setToRaw(target: any, rawKey: PropertyKey, value: T, receiver: any): boolean;
}
export interface NameMapping {
    [key: string]: PropertyKey;
}
export interface ConvertMap {
    [key: string]: TypeConverter<any>;
}
export declare abstract class ObjectMapperBase implements ProxyHandler<any> {
    abstract getConverterFor<T>(key: PropertyKey): TypeConverter<T> | null;
    abstract getMappingKeys(): PropertyKey[];
    abstract getRawKey(key: PropertyKey): PropertyKey | null;
    abstract ownKeys(target: any): PropertyKey[];
    abstract has(target: any, key: PropertyKey): boolean;
    abstract get(target: any, key: PropertyKey, receiver: any): any;
    abstract set(target: any, key: PropertyKey, value: any, receiver: any): boolean;
}
export declare class ObjectMapper extends ObjectMapperBase {
    private mappings;
    private convertMap;
    constructor(mappings: NameMapping, convertMap?: ConvertMap | null);
    getMappingKeys(): (string | number | symbol)[];
    ownKeys(target: any): PropertyKey[];
    getConverterFor<T>(key: PropertyKey): TypeConverter<T> | null;
    has(target: any, key: PropertyKey): boolean;
    getRawKey(key: PropertyKey): string | number | symbol | null;
    getOwnPropertyDescriptor(target: any, key: PropertyKey): PropertyDescriptor | undefined;
    get(target: any, key: PropertyKey, receiver: any): any;
    set(target: any, key: PropertyKey, value: any, receiver: any): boolean;
}
export declare type PartialNamedArray<T> = {
    [index: number]: T;
} & Array<unknown>;
export declare class ArrayMapper extends ObjectMapperBase {
    private objMappings;
    private objConvertMap;
    private arrayMap;
    private objectMapper;
    constructor(objMappings: NameMapping, objConvertMap?: ConvertMap | null);
    get ObjectMapper(): ObjectMapper;
    getConverterFor<T>(key: PropertyKey): TypeConverter<T> | null;
    getMappingKeys(): PropertyKey[];
    ownKeys(target: any): (string | number | symbol)[];
    getRawKey(key: PropertyKey): PropertyKey | null;
    has(target: any, key: PropertyKey): boolean;
    protected isCoreKey(key: PropertyKey): boolean;
    get(target: any, key: PropertyKey, receiver: any): any;
    set(target: any, key: PropertyKey, value: any, receiver: any): boolean;
    protected getProxyFor(rawObj: any): any;
}
