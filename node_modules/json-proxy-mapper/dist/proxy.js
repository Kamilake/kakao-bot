"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Converter = exports.WrappedArray = exports.WrappedObject = void 0;
const common_1 = require("./common");
const serializer_1 = require("./serializer");
class WrappedObject {
    constructor(target, handler) {
        this.original = target;
        this.named = new Proxy(target, handler);
    }
    static createFrom(named, handler) {
        let wrapped = new WrappedObject({}, handler);
        Reflect.ownKeys(named).forEach(p => Reflect.set(wrapped.named, p, Reflect.get(named, p)));
        return wrapped;
    }
}
exports.WrappedObject = WrappedObject;
class WrappedArray extends WrappedObject {
}
exports.WrappedArray = WrappedArray;
var Converter;
(function (Converter) {
    class ImmutableRef {
        constructor(mappings, convertMap = null) {
            this.objectMap = new WeakMap();
            this.mapper = this.createMapper(mappings, convertMap);
        }
        getFromRaw(target, rawKey, receiver) {
            let rawObj = Reflect.get(target, rawKey, receiver);
            if (this.objectMap.has(rawObj))
                return this.objectMap.get(rawObj);
            let cache = this.createConverted(rawObj);
            this.objectMap.set(rawObj, cache);
            return cache;
        }
        setToRaw(target, rawKey, value, receiver) {
            return Reflect.set(target, rawKey, serializer_1.Serializer.serialize(value, this.mapper), receiver);
        }
    }
    Converter.ImmutableRef = ImmutableRef;
    class Object extends ImmutableRef {
        createMapper(mappings, convertMap = null) {
            return new common_1.ObjectMapper(mappings, convertMap);
        }
        createConverted(rawObj) {
            return new Proxy(rawObj, this.mapper);
        }
    }
    Converter.Object = Object;
    class Array extends ImmutableRef {
        createMapper(mappings, convertMap = null) {
            return new common_1.ArrayMapper(mappings, convertMap);
        }
        createConverted(rawArr) {
            return new Proxy(rawArr, this.mapper);
        }
    }
    Converter.Array = Array;
})(Converter = exports.Converter || (exports.Converter = {}));
//# sourceMappingURL=proxy.js.map