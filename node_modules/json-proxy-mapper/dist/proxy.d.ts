import { ObjectMapper, TypeConverter, NameMapping, ConvertMap, ObjectMapperBase, ArrayMapper, PartialNamedArray } from "./common";
export declare class WrappedObject<T extends object> {
    readonly named: T;
    readonly original: any;
    constructor(target: any, handler: ObjectMapperBase);
    static createFrom<T extends object>(named: T, handler: ObjectMapperBase): WrappedObject<T>;
}
export declare class WrappedArray<T> extends WrappedObject<PartialNamedArray<T>> {
}
export declare namespace Converter {
    abstract class ImmutableRef<T extends object> implements TypeConverter<T> {
        private objectMap;
        readonly mapper: ObjectMapperBase;
        constructor(mappings: NameMapping, convertMap?: ConvertMap | null);
        protected abstract createMapper(mappings: NameMapping, convertMap: ConvertMap | null): ObjectMapperBase;
        getFromRaw(target: any, rawKey: PropertyKey, receiver?: any): T;
        abstract createConverted(rawObj: any): T;
        setToRaw(target: any, rawKey: PropertyKey, value: T, receiver?: any): boolean;
    }
    class Object<T extends object> extends ImmutableRef<T> {
        createMapper(mappings: NameMapping, convertMap?: ConvertMap | null): ObjectMapper;
        createConverted(rawObj: any): T;
    }
    class Array<T extends object> extends ImmutableRef<Array<T>> {
        createMapper(mappings: NameMapping, convertMap?: ConvertMap | null): ArrayMapper;
        createConverted(rawArr: any): Array<T>;
    }
}
