"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Serializer = void 0;
const common_1 = require("./common");
const proxy_1 = require("./proxy");
var Serializer;
(function (Serializer) {
    function serialize(obj, mapper) {
        if (obj && obj instanceof Array && mapper instanceof common_1.ArrayMapper) {
            return serializeArray(obj, mapper);
        }
        let serialized = {};
        let keys = Reflect.ownKeys(obj);
        for (let key of keys) {
            mapper.set(serialized, key, Reflect.get(obj, key), serialized);
        }
        return serialized;
    }
    Serializer.serialize = serialize;
    function deserialize(rawObj, mapper) {
        if (rawObj && rawObj instanceof Array && mapper instanceof common_1.ArrayMapper) {
            return deserializeArray(rawObj, mapper);
        }
        let deserialized;
        if (!rawObj)
            return deserialized;
        deserialized = {};
        let mappingKeys = mapper.getMappingKeys();
        for (let key of mappingKeys) {
            let rawKey = mapper.getRawKey(key);
            let converter = mapper.getConverterFor(key);
            if (rawKey) {
                let val;
                if (converter && converter instanceof proxy_1.Converter.ImmutableRef) {
                    val = deserialize(Reflect.get(rawObj, rawKey, rawObj), converter.mapper);
                }
                else {
                    val = mapper.get(rawObj, key, rawObj);
                }
                Reflect.set(deserialized, key, val);
            }
        }
        return deserialized;
    }
    Serializer.deserialize = deserialize;
    function serializeArray(arr, mapper) {
        let serialized = [];
        let len = arr.length;
        for (let i = 0; i < len; i++) {
            serialized[i] = serialize(arr[i], mapper.ObjectMapper);
        }
        return serialized;
    }
    function deserializeArray(rawObj, mapper) {
        let deserialized = [];
        let len = rawObj.length;
        for (let i = 0; i < len; i++) {
            deserialized[i] = deserialize(rawObj[i], mapper.ObjectMapper);
        }
        return deserialized;
    }
})(Serializer = exports.Serializer || (exports.Serializer = {}));
//# sourceMappingURL=serializer.js.map