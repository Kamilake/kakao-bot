"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TalkClientUserInfo = exports.TalkClientChatUser = exports.TalkClient = exports.TalkApiClient = void 0;
const events_1 = require("events");
const auth_client_1 = require("./api/auth-client");
const channel_board_client_1 = require("./api/channel-board-client");
const open_chat_client_1 = require("./api/open-chat-client");
const open_upload_api_1 = require("./api/open-upload-api");
const service_client_1 = require("./api/service-client");
const client_status_1 = require("./client-status");
const client_config_provider_1 = require("./config/client-config-provider");
const network_manager_1 = require("./network/network-manager");
const loco_packet_base_1 = require("./packet/loco-packet-base");
const packet_set_status_1 = require("./packet/packet-set-status");
const channel_manager_1 = require("./talk/channel/channel-manager");
const chat_manager_1 = require("./talk/chat/chat-manager");
const open_link_manager_1 = require("./talk/open/open-link-manager");
const web_api_struct_1 = require("./talk/struct/web-api-struct");
const user_manager_1 = require("./talk/user/user-manager");
const user_type_1 = require("./talk/user/user-type");
class TalkApiClient extends events_1.EventEmitter {
    constructor(name, deviceUUID, config) {
        super();
        this.configProvider = new client_config_provider_1.DefaultClientConfigProvider(config);
        this.auth = new auth_client_1.AuthClient(name, deviceUUID, this.configProvider);
        this.service = new service_client_1.ServiceClient(this.auth, this.configProvider);
        this.openchatWeb = new open_chat_client_1.OpenChatClient(this.auth, this.configProvider);
        this.openUploadApi = new open_upload_api_1.OpenUploadApi(this.configProvider);
        this.channelBoard = new channel_board_client_1.ChannelBoardClient(this.auth, this.configProvider);
        this.openChannelBoard = new channel_board_client_1.OpenChannelBoardClient(this.auth, this.configProvider);
    }
    get Name() {
        return this.auth.Name;
    }
    get ConfigProvider() {
        return this.configProvider;
    }
    set ConfigProvider(provider) {
        this.configProvider = provider;
    }
    get Auth() {
        return this.auth;
    }
    get Service() {
        return this.service;
    }
    get OpenChat() {
        return this.openchatWeb;
    }
    get OpenUploadApi() {
        return this.openUploadApi;
    }
    get ChannelBoard() {
        return this.channelBoard;
    }
    get OpenChannelBoard() {
        return this.openChannelBoard;
    }
    get Logon() {
        return this.auth.Logon;
    }
    async login(email, password, forced = false) {
        if (this.Logon) {
            throw new Error('Already logon');
        }
        await this.auth.login(email, password, forced);
    }
    async loginToken(email, token, forced = false, locked = false) {
        if (this.Logon) {
            throw new Error('Already logon');
        }
        await this.auth.loginToken(email, token, forced, locked);
    }
    async relogin() {
        await this.auth.relogin();
    }
    logout() {
        this.auth.logout();
    }
}
exports.TalkApiClient = TalkApiClient;
class TalkClient extends TalkApiClient {
    constructor(name, deviceUUID, config) {
        super(name, deviceUUID, config);
        this.networkManager = new network_manager_1.NetworkManager(this, this.ConfigProvider);
        this.channelManager = new channel_manager_1.ChannelManager(this);
        this.userManager = new user_manager_1.UserManager(this);
        this.chatManager = new chat_manager_1.ChatManager(this);
        this.openLinkManager = new open_link_manager_1.OpenLinkManager(this);
        this.clientUser = null;
        this.status = client_status_1.ClientStatus.UNLOCKED;
    }
    get NetworkManager() {
        return this.networkManager;
    }
    get ChannelManager() {
        return this.channelManager;
    }
    get UserManager() {
        return this.userManager;
    }
    get ChatManager() {
        return this.chatManager;
    }
    get OpenLinkManager() {
        return this.openLinkManager;
    }
    get LocoLogon() {
        return this.networkManager.Logon;
    }
    get ClientUser() {
        if (!this.LocoLogon)
            throw new Error('Client not logon to loco');
        return this.clientUser;
    }
    async login(email, password, forced = false) {
        if (this.LocoLogon)
            throw { status: web_api_struct_1.WebApiStatusCode.OPERATION_DENIED, message: `Already logon to loco` };
        await super.login(email, password, forced);
        await this.locoLogin();
    }
    async loginToken(email, token, forced = false, locked = false) {
        if (this.LocoLogon)
            throw { status: web_api_struct_1.WebApiStatusCode.OPERATION_DENIED, message: `Already logon to loco` };
        await super.loginToken(email, token, forced, locked);
        await this.locoLogin();
    }
    async relogin() {
        await super.relogin();
        this.networkManager.disconnect();
        await this.locoLogin();
    }
    async locoLogin() {
        let accessData = this.Auth.getLatestAccessData();
        let res = await this.Auth.requestMoreSettings(0);
        if (res.status !== web_api_struct_1.WebApiStatusCode.SUCCESS) {
            throw { status: web_api_struct_1.WebApiStatusCode.OPERATION_DENIED, message: `more_settings.json request failed` };
        }
        let loginRes = await this.networkManager.locoLogin(this.Auth.DeviceUUID, accessData.userId, accessData.accessToken);
        this.clientUser = new TalkClientChatUser(this, accessData.userId, res, loginRes.OpenChatToken);
        this.userManager.initializeClient();
        await this.channelManager.initializeLoginData(loginRes.ChatDataList);
        await this.openLinkManager.initOpenSession();
        this.emit('login', this.clientUser);
    }
    async setStatus(status) {
        if (this.status !== status)
            this.status = status;
        return this.updateStatus();
    }
    async updateStatus() {
        let res = await this.networkManager.requestPacketRes(new packet_set_status_1.PacketSetStatusReq(this.status));
        return { status: res.StatusCode, result: res.StatusCode === loco_packet_base_1.StatusCode.SUCCESS };
    }
    getStatus() {
        return this.status;
    }
    logout() {
        super.logout();
        this.networkManager.disconnect();
    }
}
exports.TalkClient = TalkClient;
class TalkClientChatUser extends events_1.EventEmitter {
    constructor(client, id, settings, mainOpenToken) {
        super();
        this.mainOpenToken = mainOpenToken;
        this.client = client;
        this.id = id;
        this.mainUserInfo = new TalkClientUserInfo(this, settings);
    }
    get Client() {
        return this.client;
    }
    get Id() {
        return this.id;
    }
    get MainUserInfo() {
        return this.mainUserInfo;
    }
    get MainOpenToken() {
        return this.mainOpenToken;
    }
    get Nickname() {
        return this.mainUserInfo.Nickname;
    }
    async createDM() {
        return this.client.ChannelManager.createMemoChannel();
    }
    isClientUser() {
        return true;
    }
}
exports.TalkClientChatUser = TalkClientChatUser;
class TalkClientUserInfo {
    constructor(user, settings) {
        this.user = user;
        this.settings = settings;
    }
    get Client() {
        return this.user.Client;
    }
    get User() {
        return this.user;
    }
    get Id() {
        return this.user.Id;
    }
    get AccountId() {
        return this.settings.accountId;
    }
    get Nickname() {
        return this.settings.nickName;
    }
    get UserType() {
        return user_type_1.UserType.Undefined;
    }
    get ProfileImageURL() {
        return this.settings.profileImageUrl || '';
    }
    get FullProfileImageURL() {
        return this.settings.fullProfileImageUrl || '';
    }
    get OriginalProfileImageURL() {
        return this.settings.originalProfileImageUrl || '';
    }
    get EmailAddress() {
        return this.settings.emailAddress;
    }
    get AccountDisplayId() {
        return this.settings.accountDisplayId;
    }
    get TalkId() {
        return this.settings.uuid;
    }
    get StatusMessage() {
        return this.settings.statusMessage;
    }
    get NsnPhoneNumber() {
        return this.settings.nsnNumber;
    }
    get PstnPhoneNumber() {
        return this.settings.pstnNumber;
    }
    get FormattedNsnPhoneNumber() {
        return this.settings.formattedNsnNumber;
    }
    get FormattedPstnPhoneNumber() {
        return this.settings.formattedPstnNumber;
    }
    isOpenUser() {
        return false;
    }
}
exports.TalkClientUserInfo = TalkClientUserInfo;
//# sourceMappingURL=client.js.map