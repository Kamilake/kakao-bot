import { ChatType } from "./chat-type";
import { Long } from "bson";
import { ChatChannel } from "../channel/chat-channel";
import { ChatUser } from "../user/chat-user";
import { ChatAttachment, PhotoAttachment, MessageTemplate, MediaTemplates, FileAttachment } from "../..";
import { EmoticonAttachment, LongTextAttachment, VideoAttachment, MentionContentList, ChatMention, MapAttachment, ReplyAttachment } from "./attachment/chat-attachment";
import { SharpAttachment } from "./attachment/sharp-attachment";
import { ChatFeed } from "./chat-feed";
import { CustomAttachment } from "./attachment/custom-attachment";
import { FeedType } from "../feed/feed-type";
import { RichFeedAttachment } from "./attachment/rich-feed-attachment";
import { RequestResult } from "../request/request-result";
export declare abstract class Chat {
    private prevLogId;
    private logId;
    private originalType;
    private channel;
    private sender;
    private messageId;
    private text;
    private rawAttachment;
    private attachmentList;
    private mentionMap;
    private sendTime;
    constructor(channel: ChatChannel, sender: ChatUser, originalType: ChatType, messageId: number, logId: Long, prevLogId: Long, sendTime: number, text: string, rawAttachment?: string);
    get Channel(): ChatChannel<import("../..").ChatUserInfo>;
    get Sender(): ChatUser;
    get PrevLogId(): Long;
    get OriginalType(): ChatType;
    get LogId(): Long;
    get MessageId(): number;
    get Text(): string;
    get SendTime(): number;
    get AttachmentList(): ChatAttachment[];
    get RawAttachment(): any;
    get MentionMap(): Map<string, MentionContentList>;
    markChatRead(): Promise<void>;
    getMentionContentList(): MentionContentList[];
    isMentioned(userId: Long): boolean;
    getUserMentionList(userId: Long): MentionContentList | null;
    getMentionCount(userId: Long): number;
    abstract get Type(): ChatType;
    isFeed(): boolean;
    private feed?;
    getFeed(): ChatFeed<FeedType>;
    protected processAttachment(text: string, rawAttachment: string): void;
    protected abstract readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
    protected processMention(rawMentions: any[]): void;
    replyText(...textFormat: (string | ChatMention)[]): Promise<Chat | null>;
    replyMedia(template: MediaTemplates): Promise<Chat | null>;
    replyTemplate(template: MessageTemplate): Promise<Chat | null>;
    get Deletable(): boolean;
    get Hidable(): boolean;
    delete(): Promise<RequestResult<boolean>>;
    hide(): Promise<RequestResult<boolean>>;
}
export declare class UnknownChat extends Chat {
    get Type(): ChatType;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class FeedChat<T extends ChatFeed = ChatFeed> extends Chat {
    get Type(): ChatType;
    get Feed(): T;
    get RichFeedAttachment(): RichFeedAttachment | null;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class TextChat extends Chat {
    get Type(): ChatType;
    get LongText(): LongTextAttachment | null;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare abstract class PhotoChat extends Chat {
    get AttachmentList(): PhotoAttachment[];
}
export declare class SinglePhotoChat extends PhotoChat {
    get Type(): ChatType;
    get Photo(): PhotoAttachment | null;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class MultiPhotoChat extends PhotoChat {
    get Type(): ChatType;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare abstract class EmoticonChat extends Chat {
    get Emoticon(): EmoticonAttachment | null;
}
export declare class StaticEmoticonChat extends EmoticonChat {
    get Type(): ChatType;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class AnimatedEmoticonChat extends EmoticonChat {
    get Type(): ChatType;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class GifEmoticonChat extends EmoticonChat {
    get Type(): ChatType;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class VideoChat extends Chat {
    get Type(): ChatType;
    get Video(): VideoAttachment | null;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class FileChat extends Chat {
    get Type(): ChatType;
    get Map(): FileAttachment;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class SharpSearchChat extends Chat {
    get Type(): ChatType;
    get Sharp(): SharpAttachment | null;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class MapChat extends Chat {
    get Type(): ChatType;
    get Map(): MapAttachment | null;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class ReplyChat extends Chat {
    private contentOnly;
    get Type(): ChatType;
    get ShowContentOnly(): boolean;
    get Reply(): ReplyAttachment | null;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare class CustomChat extends Chat {
    get Type(): ChatType;
    get Custom(): CustomAttachment | null;
    protected readAttachment(attachmentJson: any, attachmentList: ChatAttachment[]): void;
}
export declare namespace TypeMap {
    type ChatConstructor = new (channel: ChatChannel, sender: ChatUser, originalType: ChatType, messageId: number, logId: Long, prevLogId: Long, sendTime: number, text: string, rawAttachment: string | undefined) => Chat;
    function getDefaultConstructor(): ChatConstructor;
    function getChatConstructor(type: ChatType): ChatConstructor;
}
