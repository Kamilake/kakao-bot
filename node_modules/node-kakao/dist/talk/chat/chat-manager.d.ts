import { LocoClient } from "../../client";
import { ChatlogStruct } from "../struct/chatlog-struct";
import { Long } from "bson";
import { Chat } from "./chat";
import { MediaManager } from "../media/media-manager";
import { ChatChannel } from "../channel/chat-channel";
import { ChatContent } from "./attachment/chat-attachment";
import { PacketMessageWriteRes } from "../../packet/packet-message";
import { ChatType } from "./chat-type";
import { MessageTemplate } from "./template/message-template";
import { RequestResult } from "../request/request-result";
import { MediaTemplates } from "./template/media-template";
import { StructType } from "../struct/struct-base";
export declare class ChatManager {
    private client;
    private mediaManager;
    private messageId;
    constructor(client: LocoClient);
    get Client(): LocoClient;
    get MediaManager(): MediaManager;
    get CurrentMessageId(): number;
    getNextMessageId(): number;
    getChatListFrom(channelId: Long, sinceLogId: Long): Promise<RequestResult<Chat[]>>;
    getChatListBetween(channelId: Long, startLogId: Long, count: number, endLogId: Long): Promise<RequestResult<Chat[]>>;
    protected chatFromWriteRes(res: PacketMessageWriteRes, text: string, extra: string): Promise<Chat | null>;
    sendText(channel: ChatChannel, ...textFormat: (string | ChatContent)[]): Promise<Chat | null>;
    forwardChat(channel: ChatChannel, chat: Chat): Promise<Chat | null>;
    sendRaw(channel: ChatChannel, type: ChatType, text: string, extra: {
        [key: string]: StructType;
    }): Promise<Chat | null>;
    forwardRaw(channel: ChatChannel, type: ChatType, text: string, extra: {
        [key: string]: StructType;
    }): Promise<Chat | null>;
    sendMedia(channel: ChatChannel, template: MediaTemplates): Promise<Chat | null>;
    sendTemplate(channel: ChatChannel, template: MessageTemplate): Promise<Chat | null>;
    chatFromChatlog(chatLog: ChatlogStruct): Chat | null;
    deleteChat(channelId: Long, logId: Long): Promise<RequestResult<boolean>>;
}
