/// <reference types="node" />
import { OpenLinkChannel } from "../open/open-link";
import { OpenMemberStruct, OpenLinkReactionInfo, LinkReactionType } from "../struct/open/open-link-struct";
import { ChatUser, ChatUserInfo, OpenChatUserInfo, DisplayUserInfo, NormalChatUserInfo } from "../user/chat-user";
import { OpenMemberType } from "../open/open-link-type";
import { Long } from "bson";
import { PrivilegeMetaContent, ProfileMetaContent, TvMetaContent, TvLiveMetaContent, ChannelMetaStruct, GroupMetaContent, LiveTalkCountMetaContent, ChannelMetaType, ChannelClientMetaStruct, BotMetaContent } from "../struct/channel-meta-struct";
import { ChatContent } from "../chat/attachment/chat-attachment";
import { MessageTemplate } from "../chat/template/message-template";
import { Chat } from "../chat/chat";
import { ChatType } from "../chat/chat-type";
import { ChannelSettings } from "../channel/channel-settings";
import { ChannelManager } from "../channel/channel-manager";
import { ChannelDataStruct } from "../struct/channel-data-struct";
import { EventEmitter } from "events";
import { ChatChannel, OpenChatChannel, MemoChatChannel, NormalChatChannel } from "../channel/chat-channel";
import { MemberStruct, DisplayMemberStruct } from "../struct/member-struct";
import { ManagedOpenChatUserInfo, ManagedChatUserInfo } from "./managed-chat-user";
import { RequestResult } from "../request/request-result";
import { OpenProfileTemplates } from "../open/open-link-profile-template";
import { MediaTemplates } from "../chat/template/media-template";
export declare class ManagedChatChannel extends EventEmitter implements ChatChannel {
    private manager;
    private id;
    private dataStruct;
    private lastChat;
    private roomImageURL;
    private roomFullImageURL;
    private clientRoomImageURL;
    private clientRoomFullImageURL;
    private clientName;
    private clientPushSound;
    private isFavorite;
    private metaMap;
    private displayUserInfoList;
    private userInfoMap;
    constructor(manager: ChannelManager, id: Long, dataStruct: ChannelDataStruct);
    get Client(): import("../..").LocoClient;
    get ChannelManager(): ChannelManager;
    get ChatManager(): import("../..").ChatManager;
    get LastChat(): Chat | null;
    get Id(): Long;
    get Type(): import("../..").ChannelType;
    get PushAlert(): boolean;
    get Name(): string;
    get IsFavorite(): boolean;
    get RoomImageURL(): string;
    get RoomFullImageURL(): string;
    get ClientName(): string;
    get ClientRoomImageURL(): string;
    get ClientRoomFullImageURL(): string;
    get ChannelMetaList(): ChannelMetaStruct[];
    get DisplayUserInfoList(): ManagedDisplayUserInfo[];
    get UserCount(): number;
    getDisplayName(): string;
    getDisplayProfileList(): string[];
    getUserInfoList(): ChatUserInfo[];
    hasUserInfo(id: Long): boolean;
    getUserInfoId(id: Long): ChatUserInfo | null;
    getManagedUserInfo(user: ChatUser): ManagedChatUserInfo | ManagedOpenChatUserInfo | null;
    getManagedUserInfoId(id: Long): ManagedChatUserInfo | ManagedOpenChatUserInfo | null;
    getUserInfo(user: ChatUser): ChatUserInfo | null;
    chatON(): Promise<RequestResult<boolean>>;
    getLatestUserInfoId(id: Long): Promise<ChatUserInfo | null>;
    getLatestUserInfo(user: ChatUser): Promise<ChatUserInfo | null>;
    protected getUserInfoIdMap(id: Long): ChatUserInfo | null;
    getChannelMeta(type: ChannelMetaType): ChannelMetaStruct | null;
    hasChannelMeta(type: ChannelMetaType): boolean;
    markChannelRead(lastWatermark: Long): Promise<void>;
    sendText(...textFormat: (string | ChatContent)[]): Promise<Chat | null>;
    sendMedia(template: MediaTemplates): Promise<Chat | null>;
    sendTemplate(template: MessageTemplate): Promise<Chat | null>;
    leave(block?: boolean): Promise<RequestResult<boolean>>;
    setChannelSettings(settings: ChannelSettings): Promise<RequestResult<boolean>>;
    setTitleMeta(title: string): Promise<RequestResult<boolean>>;
    setNoticeMeta(notice: string): Promise<RequestResult<boolean>>;
    setPrivilegeMeta(content: PrivilegeMetaContent): Promise<RequestResult<boolean>>;
    setProfileMeta(content: ProfileMetaContent): Promise<RequestResult<boolean>>;
    setTvMeta(content: TvMetaContent): Promise<RequestResult<boolean>>;
    setTvLiveMeta(content: TvLiveMetaContent): Promise<RequestResult<boolean>>;
    setLiveTalkCountMeta(content: LiveTalkCountMetaContent): Promise<RequestResult<boolean>>;
    setGroupMeta(content: GroupMetaContent): Promise<RequestResult<boolean>>;
    setBotMeta(content: BotMetaContent): Promise<RequestResult<boolean>>;
    updateData(dataStruct: ChannelDataStruct): void;
    updateMetaList(metaList: ChannelMetaStruct[]): void;
    updateMeta(type: ChannelMetaType, meta: ChannelMetaStruct | null): void;
    updateClientMeta(clientMeta: ChannelClientMetaStruct): void;
    updateChannelSettings(settings: ChannelSettings): void;
    updateLastChat(chat: Chat): void;
    updateDisplayUserInfoList(list: ManagedDisplayUserInfo[]): void;
    updateUserInfo(userId: Long, userInfo: ChatUserInfo | null): void;
    updateMemberList(memberList: MemberStruct[]): void;
    isOpenChat(): boolean;
}
export declare class ManagedDisplayUserInfo implements DisplayUserInfo {
    private user;
    private displayStruct;
    constructor(user: ChatUser, displayStruct: DisplayMemberStruct);
    get Client(): import("../..").LocoClient;
    get User(): ChatUser;
    get Id(): Long;
    get Nickname(): string;
    get ProfileImageURL(): string;
    get FullProfileImageURL(): string;
    get OriginalProfileImageURL(): string;
    isOpenUser(): boolean;
}
export declare class ManagedNormalChatChannel extends ManagedChatChannel implements NormalChatChannel {
    getUserInfoList(): NormalChatUserInfo[];
    getUserInfo(user: ChatUser): NormalChatUserInfo | null;
    getUserInfoId(id: Long): NormalChatUserInfo | null;
    inviteUser(user: ChatUser): Promise<RequestResult<boolean>>;
    inviteUserId(userId: Long): Promise<RequestResult<boolean>>;
    inviteUserList(userList: ChatUser[]): Promise<RequestResult<boolean>>;
    inviteUserIdList(userIdList: Long[]): Promise<RequestResult<boolean>>;
    isOpenChat(): false;
}
export declare class ManagedMemoChatChannel extends ManagedChatChannel implements MemoChatChannel {
    getUserInfoList(): NormalChatUserInfo[];
    getUserInfo(user: ChatUser): NormalChatUserInfo | null;
    getUserInfoId(id: Long): NormalChatUserInfo | null;
    isOpenChat(): false;
}
export declare class ManagedOpenChatChannel extends ManagedChatChannel implements OpenChatChannel {
    private linkId;
    private openToken;
    private openLink;
    private clientUserInfo;
    constructor(manager: ChannelManager, id: Long, dataStruct: ChannelDataStruct, linkId: Long, openToken: number, openLink: OpenLinkChannel);
    get ClientUserInfo(): OpenChatUserInfo;
    get Name(): string;
    get LinkId(): Long;
    get OpenToken(): number;
    getOpenLink(): OpenLinkChannel;
    isOpenChat(): true;
    getUserInfoList(): OpenChatUserInfo[];
    getUserInfo(user: ChatUser): OpenChatUserInfo | null;
    getUserInfoId(id: Long): OpenChatUserInfo | null;
    getLatestUserInfoId(id: Long): Promise<OpenChatUserInfo | null>;
    getLatestUserInfo(user: ChatUser): Promise<OpenChatUserInfo | null>;
    getManagedUserInfo(user: ChatUser): ManagedOpenChatUserInfo | null;
    getManagedUserInfoId(id: Long): ManagedOpenChatUserInfo | null;
    getMemberType(user: ChatUser): OpenMemberType;
    getMemberTypeId(userId: Long): OpenMemberType;
    canManageChannel(user: ChatUser): boolean;
    canManageChannelId(userId: Long): boolean;
    isManager(user: ChatUser): boolean;
    isManagerId(userId: Long): boolean;
    kickMember(user: ChatUser): Promise<RequestResult<boolean>>;
    kickMemberId(userId: Long): Promise<RequestResult<boolean>>;
    deleteLink(): Promise<RequestResult<boolean>>;
    hideChat(chat: Chat): Promise<RequestResult<boolean>>;
    hideChatId(logId: Long): Promise<RequestResult<boolean>>;
    hideChatIdType(logId: Long, type: ChatType): Promise<RequestResult<boolean>>;
    changeProfile(profile: OpenProfileTemplates): Promise<RequestResult<boolean>>;
    setOpenMemberType(user: ChatUser, memberType: OpenMemberType.NONE | OpenMemberType.MANAGER | OpenMemberType.BOT): Promise<RequestResult<boolean>>;
    setOpenMemberTypeId(userId: Long, memberType: OpenMemberType.NONE | OpenMemberType.MANAGER | OpenMemberType.BOT): Promise<RequestResult<boolean>>;
    handOverHost(newHost: ChatUser): Promise<RequestResult<boolean>>;
    handOverHostId(newHostId: Long): Promise<RequestResult<boolean>>;
    requestReactionInfo(): Promise<RequestResult<OpenLinkReactionInfo>>;
    setReacted(reactionType: LinkReactionType): Promise<RequestResult<boolean>>;
    updateLink(link: OpenLinkChannel): void;
    updateUserInfo(id: Long, userInfo: OpenChatUserInfo | null): void;
    updateOpenMemberList(memberList: OpenMemberStruct[]): void;
    updateOpenMember(memberStruct: OpenMemberStruct): void;
}
