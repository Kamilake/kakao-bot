"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedOpenLink = exports.ManagedOpenKickedUserInfo = exports.ManagedOpenUserInfo = void 0;
const bson_1 = require("bson");
class ManagedOpenUserInfo {
    constructor(manager, linkId, openToken, memberStruct) {
        this.manager = manager;
        this.linkId = linkId;
        this.openToken = openToken;
        this.memberStruct = memberStruct;
    }
    get Client() {
        return this.manager.Client;
    }
    get Id() {
        return this.memberStruct.userId;
    }
    get Nickname() {
        return this.memberStruct.nickname;
    }
    get ProfileLinkId() {
        return this.linkId;
    }
    get ProfileOpenToken() {
        return this.openToken;
    }
    get MemberType() {
        return this.memberStruct.memberType;
    }
    get UserType() {
        return this.memberStruct.type;
    }
    get ProfileImageURL() {
        return this.memberStruct.profileImageUrl;
    }
    get FullProfileImageURL() {
        return this.memberStruct.fullProfileImageUrl;
    }
    get OriginalProfileImageURL() {
        return this.memberStruct.originalProfileImageUrl;
    }
    async getOpenLink() {
        if (!this.linkId)
            return null;
        return this.manager.get(this.linkId);
    }
    isOpenUser() {
        return true;
    }
    hasOpenProfile() {
        return !!this.linkId;
    }
    updateStruct(memberStruct) {
        this.memberStruct = memberStruct;
    }
}
exports.ManagedOpenUserInfo = ManagedOpenUserInfo;
class ManagedOpenKickedUserInfo {
    constructor(manager, kickedMemberStruct) {
        this.manager = manager;
        this.kickedMemberStruct = kickedMemberStruct;
    }
    get Client() {
        return this.manager.Client;
    }
    get Id() {
        return this.kickedMemberStruct.userId;
    }
    get Nickname() {
        return this.kickedMemberStruct.nickname;
    }
    get KickedChannelId() {
        return this.kickedMemberStruct.kickedChannelId;
    }
    get ProfileImageURL() {
        return this.kickedMemberStruct.profileImageUrl;
    }
    get FullProfileImageURL() {
        return this.kickedMemberStruct.profileImageUrl;
    }
    get OriginalProfileImageURL() {
        return this.kickedMemberStruct.profileImageUrl;
    }
    isOpenUser() {
        return false;
    }
}
exports.ManagedOpenKickedUserInfo = ManagedOpenKickedUserInfo;
class ManagedOpenLink {
    constructor(manager, linkId, openToken, linkStruct) {
        this.manager = manager;
        this.linkId = linkId;
        this.openToken = openToken;
        this.linkStruct = linkStruct;
        this.userInfo = new ManagedOpenUserInfo(manager, linkStruct.owner.linkId || null, linkStruct.owner.openToken, linkStruct.owner);
    }
    get LinkId() {
        return this.linkId;
    }
    get OpenToken() {
        return this.openToken;
    }
    get LinkName() {
        return this.linkStruct.linkName;
    }
    get LinkType() {
        return this.linkStruct.linkType;
    }
    get LinkURL() {
        return this.linkStruct.linkURL;
    }
    get LinkCoverURL() {
        return this.linkStruct.linkCoverURL;
    }
    get Description() {
        return this.linkStruct.description;
    }
    get Searchable() {
        return this.linkStruct.canSearchLink;
    }
    get TagList() {
        return [];
    }
    get CreatedAt() {
        return this.linkStruct.createdAt;
    }
    get Activated() {
        return this.linkStruct.activated;
    }
    get MaxUserLimit() {
        return this.linkStruct.maxUserLimit || 0;
    }
    get MaxChannelLimit() {
        return this.linkStruct.maxChannelLimit || 0;
    }
    get LinkOwnerInfo() {
        return this.userInfo;
    }
    get PrivilegeMask() {
        return this.linkStruct.privilege;
    }
    hasPrivilege(mask) {
        let longMask = bson_1.Long.fromNumber(mask);
        return this.linkStruct.privilege.and(longMask).equals(longMask);
    }
    async requestReactionInfo() {
        return this.manager.requestReactionInfo(this.linkId);
    }
    updateStruct(linkStruct) {
        this.linkStruct = linkStruct;
        this.userInfo.updateStruct(linkStruct.owner);
    }
}
exports.ManagedOpenLink = ManagedOpenLink;
//# sourceMappingURL=managed-open-link.js.map