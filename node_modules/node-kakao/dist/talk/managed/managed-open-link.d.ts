import { OpenLinkManager } from "../open/open-link-manager";
import { OpenUserInfo, OpenKickedUserInfo } from "../user/chat-user";
import { Long } from "bson";
import { OpenMemberStruct, OpenLinkStruct, OpenKickedMemberStruct, OpenLinkReactionInfo, LinkPrivilegeMask } from "../struct/open/open-link-struct";
import { OpenLinkChannel, OpenLinkProfile, OpenLink } from "../open/open-link";
import { RequestResult } from "../request/request-result";
export declare class ManagedOpenUserInfo implements OpenUserInfo {
    private manager;
    private linkId;
    private openToken;
    private memberStruct;
    constructor(manager: OpenLinkManager, linkId: Long | null, openToken: number, memberStruct: OpenMemberStruct);
    get Client(): import("../..").LocoClient;
    get Id(): Long;
    get Nickname(): string;
    get ProfileLinkId(): Long | null;
    get ProfileOpenToken(): number;
    get MemberType(): import("../..").OpenMemberType;
    get UserType(): import("../..").UserType;
    get ProfileImageURL(): string;
    get FullProfileImageURL(): string;
    get OriginalProfileImageURL(): string;
    getOpenLink(): Promise<OpenLinkProfile | null>;
    isOpenUser(): true;
    hasOpenProfile(): boolean;
    updateStruct(memberStruct: OpenMemberStruct): void;
}
export declare class ManagedOpenKickedUserInfo implements OpenKickedUserInfo {
    private manager;
    private kickedMemberStruct;
    constructor(manager: OpenLinkManager, kickedMemberStruct: OpenKickedMemberStruct);
    get Client(): import("../..").LocoClient;
    get Id(): Long;
    get Nickname(): string;
    get KickedChannelId(): Long;
    get ProfileImageURL(): string;
    get FullProfileImageURL(): string;
    get OriginalProfileImageURL(): string;
    isOpenUser(): boolean;
}
export declare class ManagedOpenLink implements OpenLink<ManagedOpenUserInfo>, OpenLinkChannel, OpenLinkProfile {
    private manager;
    private linkId;
    private openToken;
    private linkStruct;
    private userInfo;
    constructor(manager: OpenLinkManager, linkId: Long, openToken: number, linkStruct: OpenLinkStruct);
    get LinkId(): Long;
    get OpenToken(): number;
    get LinkName(): string;
    get LinkType(): import("../..").OpenLinkType;
    get LinkURL(): string;
    get LinkCoverURL(): string;
    get Description(): string;
    get Searchable(): boolean;
    get TagList(): never[];
    get CreatedAt(): number;
    get Activated(): boolean;
    get MaxUserLimit(): number;
    get MaxChannelLimit(): number;
    get LinkOwnerInfo(): ManagedOpenUserInfo;
    get PrivilegeMask(): Long;
    hasPrivilege(mask: LinkPrivilegeMask): boolean;
    requestReactionInfo(): Promise<RequestResult<OpenLinkReactionInfo>>;
    updateStruct(linkStruct: OpenLinkStruct): void;
}
