/// <reference types="node" />
import { ChatUserInfo, ChatUser, OpenChatUserInfo } from "../user/chat-user";
import { UserManager } from "../user/user-manager";
import { MemberStruct } from "../struct/member-struct";
import { OpenLinkProfile } from "../open/open-link";
import { OpenMemberStruct } from "../struct/open/open-link-struct";
import { EventEmitter } from "events";
import { Long } from "bson";
import { OpenMemberType } from "../open/open-link-type";
import { ChatChannel } from "../channel/chat-channel";
import { RequestResult } from "../request/request-result";
export declare class ManagedChatUser extends EventEmitter implements ChatUser {
    private manager;
    private id;
    constructor(manager: UserManager, id: Long);
    get Client(): import("../..").LocoClient;
    get Id(): Long;
    isClientUser(): boolean;
    createDM(): Promise<RequestResult<ChatChannel>>;
}
export declare class ManagedChatUserInfo implements ChatUserInfo {
    private manager;
    private user;
    private memberStruct;
    constructor(manager: UserManager, user: ChatUser, memberStruct: MemberStruct);
    get Client(): import("../..").LocoClient;
    get User(): ChatUser;
    get Id(): Long;
    get Nickname(): string;
    get AccountId(): number;
    get ProfileImageURL(): string;
    get FullProfileImageURL(): string;
    get OriginalProfileImageURL(): string;
    get UserType(): import("../..").UserType;
    isOpenUser(): boolean;
    updateNickname(nickname: string): void;
}
export declare class ManagedOpenChatUserInfo implements OpenChatUserInfo {
    private manager;
    private user;
    private memberStruct;
    constructor(manager: UserManager, user: ChatUser, memberStruct: OpenMemberStruct);
    get Client(): import("../..").LocoClient;
    get User(): ChatUser;
    get Id(): Long;
    get Nickname(): string;
    get ProfileLinkId(): Long | null;
    get ProfileOpenToken(): number;
    get MemberType(): OpenMemberType;
    get UserType(): import("../..").UserType;
    get ProfileImageURL(): string;
    get FullProfileImageURL(): string;
    get OriginalProfileImageURL(): string;
    hasOpenProfile(): boolean;
    getOpenLink(): Promise<OpenLinkProfile | null>;
    isOpenUser(): boolean;
    updateNickname(nickname: string): void;
    updateMemberType(memberType: OpenMemberType): void;
}
