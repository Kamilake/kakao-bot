"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedOpenChatUserInfo = exports.ManagedChatUserInfo = exports.ManagedChatUser = void 0;
const events_1 = require("events");
const open_link_type_1 = require("../open/open-link-type");
class ManagedChatUser extends events_1.EventEmitter {
    constructor(manager, id) {
        super();
        this.manager = manager;
        this.id = id;
    }
    get Client() {
        return this.manager.Client;
    }
    get Id() {
        return this.id;
    }
    isClientUser() {
        return false;
    }
    createDM() {
        return this.Client.ChannelManager.createChannel([this]);
    }
}
exports.ManagedChatUser = ManagedChatUser;
class ManagedChatUserInfo {
    constructor(manager, user, memberStruct) {
        this.manager = manager;
        this.user = user;
        this.memberStruct = memberStruct;
    }
    get Client() {
        return this.manager.Client;
    }
    get User() {
        return this.user;
    }
    get Id() {
        return this.user.Id;
    }
    get Nickname() {
        return this.memberStruct.nickname;
    }
    get AccountId() {
        return this.memberStruct.accountId;
    }
    get ProfileImageURL() {
        return this.memberStruct.profileImageUrl;
    }
    get FullProfileImageURL() {
        return this.memberStruct.fullProfileImageUrl;
    }
    get OriginalProfileImageURL() {
        return this.memberStruct.originalProfileImageUrl;
    }
    get UserType() {
        return this.memberStruct.type;
    }
    isOpenUser() {
        return false;
    }
    updateNickname(nickname) {
        if (nickname && this.memberStruct.nickname !== nickname) {
            this.memberStruct.nickname = nickname;
        }
    }
}
exports.ManagedChatUserInfo = ManagedChatUserInfo;
class ManagedOpenChatUserInfo {
    constructor(manager, user, memberStruct) {
        this.manager = manager;
        this.user = user;
        this.memberStruct = memberStruct;
    }
    get Client() {
        return this.manager.Client;
    }
    get User() {
        return this.user;
    }
    get Id() {
        return this.user.Id;
    }
    get Nickname() {
        return this.memberStruct.nickname;
    }
    get ProfileLinkId() {
        return this.memberStruct.linkId || null;
    }
    get ProfileOpenToken() {
        return this.memberStruct.openToken || -1;
    }
    get MemberType() {
        return this.memberStruct.memberType || open_link_type_1.OpenMemberType.NONE;
    }
    get UserType() {
        return this.memberStruct.type;
    }
    get ProfileImageURL() {
        return this.memberStruct.profileImageUrl;
    }
    get FullProfileImageURL() {
        return this.memberStruct.fullProfileImageUrl;
    }
    get OriginalProfileImageURL() {
        return this.memberStruct.originalProfileImageUrl;
    }
    hasOpenProfile() {
        return !!this.memberStruct.linkId;
    }
    async getOpenLink() {
        if (!this.memberStruct.linkId)
            return null;
        return (await this.manager.Client.OpenLinkManager.get(this.memberStruct.linkId));
    }
    isOpenUser() {
        return true;
    }
    updateNickname(nickname) {
        if (this.memberStruct.nickname !== nickname) {
            this.memberStruct.nickname = nickname;
        }
    }
    updateMemberType(memberType) {
        this.memberStruct.memberType = memberType;
    }
}
exports.ManagedOpenChatUserInfo = ManagedOpenChatUserInfo;
//# sourceMappingURL=managed-chat-user.js.map