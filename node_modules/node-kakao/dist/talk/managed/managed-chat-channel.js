"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedOpenChatChannel = exports.ManagedMemoChatChannel = exports.ManagedNormalChatChannel = exports.ManagedDisplayUserInfo = exports.ManagedChatChannel = void 0;
const open_link_type_1 = require("../open/open-link-type");
const channel_meta_struct_1 = require("../struct/channel-meta-struct");
const chat_type_1 = require("../chat/chat-type");
const events_1 = require("events");
class ManagedChatChannel extends events_1.EventEmitter {
    constructor(manager, id, dataStruct) {
        super();
        this.manager = manager;
        this.id = id;
        this.dataStruct = dataStruct;
        this.roomImageURL = '';
        this.roomFullImageURL = '';
        this.lastChat = null;
        this.clientRoomImageURL = '';
        this.clientRoomFullImageURL = '';
        this.clientName = '';
        this.clientPushSound = null;
        this.isFavorite = false;
        this.displayUserInfoList = [];
        this.userInfoMap = new Map();
        this.metaMap = new Map();
    }
    get Client() {
        return this.manager.Client;
    }
    get ChannelManager() {
        return this.manager;
    }
    get ChatManager() {
        return this.Client.ChatManager;
    }
    get LastChat() {
        return this.lastChat;
    }
    get Id() {
        return this.id;
    }
    get Type() {
        return this.dataStruct.type;
    }
    get PushAlert() {
        return this.dataStruct.pushAlert;
    }
    get Name() {
        let titleMeta = this.metaMap.get(channel_meta_struct_1.ChannelMetaType.TITLE);
        return titleMeta ? titleMeta.content : '';
    }
    get IsFavorite() {
        return this.isFavorite;
    }
    get RoomImageURL() {
        return this.roomImageURL;
    }
    get RoomFullImageURL() {
        return this.roomFullImageURL;
    }
    get ClientName() {
        return this.clientName;
    }
    get ClientRoomImageURL() {
        return this.clientRoomImageURL;
    }
    get ClientRoomFullImageURL() {
        return this.clientRoomFullImageURL;
    }
    get ChannelMetaList() {
        return Array.from(this.metaMap.values());
    }
    get DisplayUserInfoList() {
        return this.displayUserInfoList;
    }
    get UserCount() {
        return this.userInfoMap.size + 1;
    }
    getDisplayName() {
        let name = this.clientName || this.Name;
        if (!name) {
            let size = Math.min(5, this.displayUserInfoList.length);
            name = this.displayUserInfoList.slice(0, size).map(info => info.Nickname).join(', ');
            if (size > this.displayUserInfoList.length)
                name += ', ...';
        }
        return name;
    }
    getDisplayProfileList() {
        if (this.clientRoomImageURL)
            return [this.clientRoomImageURL];
        let size = Math.min(4, this.displayUserInfoList.length);
        return this.displayUserInfoList.slice(0, size).map(info => info.ProfileImageURL);
    }
    getUserInfoList() {
        return Array.from(this.userInfoMap.values());
    }
    hasUserInfo(id) {
        return this.userInfoMap.has(id.toString());
    }
    getUserInfoId(id) {
        let info = this.getUserInfoIdMap(id);
        if (!info && this.Client.ClientUser.Id.equals(id))
            return this.Client.ClientUser.MainUserInfo;
        return info;
    }
    getManagedUserInfo(user) {
        return this.getManagedUserInfoId(user.Id);
    }
    getManagedUserInfoId(id) {
        return this.getUserInfoIdMap(id) || null;
    }
    getUserInfo(user) {
        return this.getUserInfoId(user.Id);
    }
    async chatON() {
        return this.manager.sendChatOn(this);
    }
    async getLatestUserInfoId(id) {
        let latest = await this.Client.UserManager.requestUserInfo(this, id);
        if (latest.result) {
            this.updateUserInfo(id, latest.result);
            return latest.result;
        }
        return null;
    }
    async getLatestUserInfo(user) {
        return this.getLatestUserInfoId(user.Id);
    }
    getUserInfoIdMap(id) {
        return this.userInfoMap.get(id.toString()) || null;
    }
    getChannelMeta(type) {
        return this.metaMap.get(type) || null;
    }
    hasChannelMeta(type) {
        return this.metaMap.has(type);
    }
    async markChannelRead(lastWatermark) {
        await this.manager.markRead(this, lastWatermark);
    }
    async sendText(...textFormat) {
        return this.ChatManager.sendText(this, ...textFormat);
    }
    async sendMedia(template) {
        return this.ChatManager.sendMedia(this, template);
    }
    async sendTemplate(template) {
        return this.ChatManager.sendTemplate(this, template);
    }
    async leave(block = false) {
        return this.manager.leave(this, block);
    }
    async setChannelSettings(settings) {
        return this.manager.updateChannelSettings(this, settings);
    }
    async setTitleMeta(title) {
        return this.manager.setTitleMeta(this, title);
    }
    async setNoticeMeta(notice) {
        return this.manager.setNoticeMeta(this, notice);
    }
    async setPrivilegeMeta(content) {
        return this.manager.setPrivilegeMeta(this, content);
    }
    async setProfileMeta(content) {
        return this.manager.setProfileMeta(this, content);
    }
    async setTvMeta(content) {
        return this.manager.setTvMeta(this, content);
    }
    async setTvLiveMeta(content) {
        return this.manager.setTvLiveMeta(this, content);
    }
    async setLiveTalkCountMeta(content) {
        return this.manager.setLiveTalkCountMeta(this, content);
    }
    async setGroupMeta(content) {
        return this.manager.setGroupMeta(this, content);
    }
    async setBotMeta(content) {
        return this.manager.setBotMeta(this, content);
    }
    updateData(dataStruct) {
        this.dataStruct = dataStruct;
    }
    updateMetaList(metaList) {
        for (let meta of metaList) {
            this.updateMeta(meta.type, meta);
        }
    }
    updateMeta(type, meta) {
        if (!meta) {
            this.metaMap.delete(type);
            return;
        }
        this.metaMap.set(type, meta);
        if (meta.type === channel_meta_struct_1.ChannelMetaType.PROFILE) {
            try {
                let content = JSON.parse(meta.content);
                this.roomImageURL = content.imageUrl;
                this.roomFullImageURL = content.fullImageUrl;
            }
            catch (e) {
            }
        }
    }
    updateClientMeta(clientMeta) {
        if (clientMeta.name)
            this.clientName = clientMeta.name;
        if (clientMeta.imageUrl)
            this.clientRoomImageURL = clientMeta.imageUrl;
        if (clientMeta.fullImageUrl)
            this.clientRoomFullImageURL = clientMeta.fullImageUrl;
        if (clientMeta.push_sound)
            this.clientPushSound = clientMeta.push_sound;
        if (clientMeta.favorite)
            this.isFavorite = clientMeta.favorite;
    }
    updateChannelSettings(settings) {
        if (settings.pushAlert)
            this.dataStruct.pushAlert = settings.pushAlert || true;
    }
    updateLastChat(chat) {
        this.lastChat = chat;
    }
    updateDisplayUserInfoList(list) {
        this.displayUserInfoList = list;
    }
    updateUserInfo(userId, userInfo) {
        if (this.Client.ClientUser.Id.equals(userId)) {
            return;
        }
        if (userInfo)
            this.userInfoMap.set(userId.toString(), userInfo);
        else
            this.userInfoMap.delete(userId.toString());
    }
    updateMemberList(memberList) {
        for (let memberStruct of memberList) {
            let userInfo = this.Client.UserManager.getInfoFromStruct(memberStruct);
            this.updateUserInfo(userInfo.Id, userInfo);
        }
    }
    isOpenChat() {
        return false;
    }
}
exports.ManagedChatChannel = ManagedChatChannel;
class ManagedDisplayUserInfo {
    constructor(user, displayStruct) {
        this.user = user;
        this.displayStruct = displayStruct;
    }
    get Client() {
        return this.user.Client;
    }
    get User() {
        return this.user;
    }
    get Id() {
        return this.displayStruct.userId;
    }
    get Nickname() {
        return this.displayStruct.nickname;
    }
    get ProfileImageURL() {
        return this.displayStruct.profileImageUrl;
    }
    get FullProfileImageURL() {
        return this.displayStruct.profileImageUrl;
    }
    get OriginalProfileImageURL() {
        return this.displayStruct.profileImageUrl;
    }
    isOpenUser() {
        return false;
    }
}
exports.ManagedDisplayUserInfo = ManagedDisplayUserInfo;
class ManagedNormalChatChannel extends ManagedChatChannel {
    getUserInfoList() {
        return super.getUserInfoList();
    }
    getUserInfo(user) {
        return this.getUserInfoId(user.Id);
    }
    getUserInfoId(id) {
        return super.getUserInfoId(id);
    }
    inviteUser(user) {
        return this.ChannelManager.inviteUser(this, user);
    }
    inviteUserId(userId) {
        return this.ChannelManager.inviteUserId(this, userId);
    }
    inviteUserList(userList) {
        return this.ChannelManager.inviteUserList(this, userList);
    }
    inviteUserIdList(userIdList) {
        return this.ChannelManager.inviteUserIdList(this, userIdList);
    }
    isOpenChat() {
        return false;
    }
}
exports.ManagedNormalChatChannel = ManagedNormalChatChannel;
class ManagedMemoChatChannel extends ManagedChatChannel {
    getUserInfoList() {
        return super.getUserInfoList();
    }
    getUserInfo(user) {
        return this.getUserInfoId(user.Id);
    }
    getUserInfoId(id) {
        return super.getUserInfoId(id);
    }
    isOpenChat() {
        return false;
    }
}
exports.ManagedMemoChatChannel = ManagedMemoChatChannel;
class ManagedOpenChatChannel extends ManagedChatChannel {
    constructor(manager, id, dataStruct, linkId, openToken, openLink) {
        super(manager, id, dataStruct);
        this.linkId = linkId;
        this.openToken = openToken;
        this.openLink = openLink;
        this.clientUserInfo = null;
    }
    get ClientUserInfo() {
        return this.clientUserInfo;
    }
    get Name() {
        return super.Name || this.openLink.LinkName;
    }
    get LinkId() {
        return this.linkId;
    }
    get OpenToken() {
        return this.openToken;
    }
    getOpenLink() {
        return this.openLink;
    }
    isOpenChat() {
        return true;
    }
    getUserInfoList() {
        return super.getUserInfoList();
    }
    getUserInfo(user) {
        return this.getUserInfoId(user.Id);
    }
    getUserInfoId(id) {
        if (this.clientUserInfo && this.clientUserInfo.Id.equals(id))
            return this.clientUserInfo;
        return super.getUserInfoId(id);
    }
    async getLatestUserInfoId(id) {
        return super.getLatestUserInfoId(id);
    }
    async getLatestUserInfo(user) {
        return super.getLatestUserInfo(user);
    }
    getManagedUserInfo(user) {
        return this.getManagedUserInfoId(user.Id);
    }
    getManagedUserInfoId(id) {
        if (this.clientUserInfo && this.clientUserInfo.Id.equals(id))
            return this.clientUserInfo;
        return this.getUserInfoIdMap(id) || null;
    }
    getMemberType(user) {
        return this.getMemberTypeId(user.Id);
    }
    getMemberTypeId(userId) {
        let info = this.getUserInfoId(userId);
        if (info)
            return info.MemberType;
        return open_link_type_1.OpenMemberType.NONE;
    }
    canManageChannel(user) {
        return this.canManageChannelId(user.Id);
    }
    canManageChannelId(userId) {
        return this.isManagerId(userId) || this.getMemberTypeId(userId) === open_link_type_1.OpenMemberType.OWNER;
    }
    isManager(user) {
        return this.isManagerId(user.Id);
    }
    isManagerId(userId) {
        return this.getMemberTypeId(userId) === open_link_type_1.OpenMemberType.MANAGER;
    }
    async kickMember(user) {
        return this.kickMemberId(user.Id);
    }
    async kickMemberId(userId) {
        return this.Client.OpenLinkManager.kickMember(this, userId);
    }
    async deleteLink() {
        return this.Client.OpenLinkManager.deleteLink(this.linkId);
    }
    async hideChat(chat) {
        return this.hideChatIdType(chat.LogId, chat.Type);
    }
    async hideChatId(logId) {
        return this.hideChatIdType(logId, chat_type_1.ChatType.Text);
    }
    async hideChatIdType(logId, type) {
        return this.Client.OpenLinkManager.hideChat(this, logId, type);
    }
    async changeProfile(profile) {
        return this.Client.OpenLinkManager.changeProfile(this, profile);
    }
    async setOpenMemberType(user, memberType) {
        return this.setOpenMemberTypeId(user.Id, memberType);
    }
    async setOpenMemberTypeId(userId, memberType) {
        return this.Client.OpenLinkManager.setOpenMemberType(this, userId, memberType);
    }
    async handOverHost(newHost) {
        return this.handOverHostId(newHost.Id);
    }
    async handOverHostId(newHostId) {
        return this.Client.OpenLinkManager.handOverHost(this, newHostId);
    }
    async requestReactionInfo() {
        return this.Client.OpenLinkManager.requestReactionInfo(this.linkId);
    }
    async setReacted(reactionType) {
        return this.Client.OpenLinkManager.setLinkReacted(this.linkId, reactionType);
    }
    updateLink(link) {
        this.openLink = link;
    }
    updateUserInfo(id, userInfo) {
        if (this.Client.ClientUser.Id.equals(id)) {
            this.clientUserInfo = userInfo;
            return;
        }
        super.updateUserInfo(id, userInfo);
    }
    updateOpenMemberList(memberList) {
        memberList.forEach(this.updateOpenMember.bind(this));
    }
    updateOpenMember(memberStruct) {
        let userInfo = this.Client.UserManager.getInfoFromStruct(memberStruct);
        this.updateUserInfo(userInfo.Id, userInfo);
    }
}
exports.ManagedOpenChatChannel = ManagedOpenChatChannel;
//# sourceMappingURL=managed-chat-channel.js.map