"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManager = void 0;
const store_1 = require("../../store/store");
const packet_get_member_1 = require("../../packet/packet-get-member");
const packet_member_1 = require("../../packet/packet-member");
const managed_chat_user_1 = require("../managed/managed-chat-user");
class UserManager extends store_1.IdInstanceStore {
    constructor(client) {
        super();
        this.client = client;
    }
    get Client() {
        return this.client;
    }
    createInstanceFor(key) {
        return new managed_chat_user_1.ManagedChatUser(this, key);
    }
    get(key) {
        if (this.client.ClientUser && this.client.ClientUser.Id.equals(key))
            return this.client.ClientUser;
        return super.get(key);
    }
    getInfoFromStruct(memberStruct) {
        if (memberStruct.openToken)
            return new managed_chat_user_1.ManagedOpenChatUserInfo(this, this.get(memberStruct.userId), memberStruct);
        return new managed_chat_user_1.ManagedChatUserInfo(this, this.get(memberStruct.userId), memberStruct);
    }
    async requestAllUserInfoList(channel) {
        let res = await this.client.NetworkManager.requestPacketRes(new packet_get_member_1.PacketGetMemberReq(channel.Id));
        return { status: res.StatusCode, result: res.MemberList.map(this.getInfoFromStruct.bind(this)) };
    }
    async requestUserInfoList(channel, idList) {
        let res = await this.client.NetworkManager.requestPacketRes(new packet_member_1.PacketMemberReq(channel.Id, idList));
        return { status: res.StatusCode, result: res.MemberList.map(this.getInfoFromStruct.bind(this)) };
    }
    async requestUserInfo(channel, id) {
        let res = await this.client.NetworkManager.requestPacketRes(new packet_member_1.PacketMemberReq(channel.Id, [id]));
        let memberStruct = res.MemberList[0];
        if (!memberStruct)
            return { status: res.StatusCode };
        return { status: res.StatusCode, result: this.getInfoFromStruct(memberStruct) };
    }
    initializeClient() {
        this.clear();
    }
}
exports.UserManager = UserManager;
//# sourceMappingURL=user-manager.js.map