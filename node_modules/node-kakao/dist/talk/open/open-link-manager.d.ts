import { OpenLinkStruct, OpenKickedMemberStruct, OpenLinkReactionInfo, LinkReactionType } from "../struct/open/open-link-struct";
import { Long } from "bson";
import { LocoClient } from "../../client";
import { AsyncIdInstanceStore } from "../../store/store";
import { OpenChatChannel } from "../channel/chat-channel";
import { ChatType } from "../chat/chat-type";
import { OpenMemberType } from "./open-link-type";
import { OpenLinkSettings } from "./open-link-settings";
import { OpenLinkTemplate } from "./open-link-template";
import { OpenLink, OpenLinkProfile } from "./open-link";
import { OpenKickedUserInfo } from "../user/chat-user";
import { RequestResult } from "../request/request-result";
import { OpenProfileTemplates } from "./open-link-profile-template";
export declare class OpenLinkManager extends AsyncIdInstanceStore<OpenLink | null> {
    private client;
    private clientLinkIdList;
    constructor(client: LocoClient);
    get Client(): LocoClient;
    get Interface(): import("../..").NetworkManager;
    get ClientUser(): import("../user/chat-user").ClientChatUser;
    get ClientLinkList(): Long[];
    isClientLink(id: Long): boolean;
    getFromURL(openLinkURL: string): Promise<OpenLink | null>;
    protected requestLinkFromIdList(linkIdList: Long[]): Promise<OpenLinkStruct[]>;
    protected requestLinkFromId(linkId: Long): Promise<OpenLinkStruct | null>;
    protected requestLinkFromURL(openLinkURL: string): Promise<OpenLinkStruct | null>;
    protected getWithLinkStruct(linkId: Long, linkStruct: OpenLinkStruct): OpenLink;
    updateInfo(link: OpenLink): Promise<OpenLink>;
    protected createWithLinkStruct(linkId: Long, linkStruct: OpenLinkStruct): OpenLink;
    protected getFromKickedStruct(kickedMemberStruct: OpenKickedMemberStruct): OpenKickedUserInfo;
    protected createInstanceFor(key: Long): Promise<OpenLink | null>;
    requestClientProfile(): Promise<RequestResult<OpenLinkProfile[]>>;
    initOpenSession(): Promise<void>;
    kickMember(channel: OpenChatChannel, userId: Long): Promise<RequestResult<boolean>>;
    deleteLink(linkId: Long): Promise<RequestResult<boolean>>;
    handOverHost(channel: OpenChatChannel, newHostUserId: Long): Promise<RequestResult<boolean>>;
    hideChat(channel: OpenChatChannel, logId: Long, type: ChatType): Promise<RequestResult<boolean>>;
    setOpenMemberType(channel: OpenChatChannel, userId: Long, type: OpenMemberType.NONE | OpenMemberType.MANAGER | OpenMemberType.BOT): Promise<RequestResult<boolean>>;
    changeProfile(channel: OpenChatChannel, profile: OpenProfileTemplates): Promise<RequestResult<boolean>>;
    createOpenProfile(template: OpenLinkTemplate): Promise<RequestResult<OpenLinkProfile>>;
    updateOpenLink(linkId: Long, settings: OpenLinkSettings): Promise<boolean>;
    deleteFromKickList(linkId: Long, kickedInfo: OpenKickedUserInfo): Promise<RequestResult<boolean>>;
    deleteFromKickListId(linkId: Long, channelId: Long, userId: Long): Promise<RequestResult<boolean>>;
    requestKickList(linkId: Long): Promise<RequestResult<OpenKickedUserInfo[]>>;
    requestReactionInfo(linkId: Long): Promise<RequestResult<OpenLinkReactionInfo>>;
    setLinkReacted(linkId: Long, reactionType: LinkReactionType): Promise<RequestResult<boolean>>;
}
