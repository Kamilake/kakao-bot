import { StructBase } from "../../struct-base";
import { Long } from "bson";
import { ChannelBoardStruct } from "./channel-board-struct";
export declare enum PostType {
    TEXT = "TEXT",
    POLL = "POLL",
    FILE = "FILE",
    IMAGE = "IMAGE",
    VIDEO = "VIDEO",
    SCHEDULE = "SCHEDULE"
}
export declare enum PostPermission {
}
export declare enum BoardEmotionType {
    LIKE = "LIKE"
}
export declare namespace ChannelPost {
    enum ContentType {
        TEXT = "text",
        MENTION = "user",
        EVERYONE_MENTION = "user_all"
    }
    interface Comment extends StructBase {
        id: string;
        content: string;
        permission: PostPermission;
        owner_id: Long;
        created_at: string;
    }
    interface Emotion {
        id: string;
        emotion: BoardEmotionType;
        owner_id: Long;
        created_at: string;
    }
    enum PollItemType {
        TEXT = "text"
    }
    interface PollItem {
        id: string;
        title: string;
        voted: boolean;
        user_count: number;
    }
    interface Poll {
        id: string;
        subject: string;
        secret: boolean;
        closed: boolean;
        voted: boolean;
        items: PollItem[];
        permission: PostPermission;
        item_type: PollItemType;
        item_addable: boolean;
        multiSelect: boolean;
        user_count: number;
        post_id: string;
        created_at: string;
    }
    interface File {
        id: string;
        filename: string;
        size: number;
        ext: string;
        download_url: string;
        repo: string;
        valid_until: Long;
        post_id: string;
        owner_id: Long;
        created_at: string;
    }
    interface Schedule {
        subject: string;
        start_at: number;
        end_at: number;
        all_day: string;
        location?: string;
        alarm_at?: number;
        ask_attend: boolean;
    }
    interface Media {
        id: string;
        media_type: string;
        small_url?: string;
        medium_url?: string;
        large_url?: string;
        original_url?: string;
        video_download_low_quality_url?: string;
        video_download_high_quality_url?: string;
        video_streaming_low_quality_url?: string;
        video_streaming_high_quality_url?: string;
        valid_until: Long;
        post_id: string;
        owner_id: Long;
        created_at: string;
    }
    interface Scrap {
        url: string;
        canonicalUrl: string;
        contentType: string;
        title: string;
        description: string;
        mainImageUrl: string;
    }
    interface Text {
        text: string;
        type: ContentType.TEXT;
    }
    interface Mention {
        type: ContentType.MENTION;
        id: Long;
    }
    interface EveryoneMention {
        type: ContentType.EVERYONE_MENTION;
    }
}
export declare type PostContent = ChannelPost.Text | ChannelPost.Mention | ChannelPost.EveryoneMention;
export interface SimpleChannelPostStruct extends StructBase {
    id: string;
    owner_id: Long;
    object_type: PostType;
    created_at: string;
    read_count: number;
    comment_count: number;
    emotion_count: number;
    notice: boolean;
    permission: PostPermission;
    content?: string;
    poll?: ChannelPost.Poll;
    files?: ChannelPost.File[];
    media?: ChannelPost.Media;
    scrap?: string;
}
export interface ChannelPostStruct extends SimpleChannelPostStruct {
    comments: ChannelPost.Comment[];
    has_more_comments: boolean;
    emotions: ChannelPost.Emotion[];
    my_emotion?: ChannelPost.Emotion;
}
declare type ChannelPostReqMix = ChannelBoardStruct & ChannelPostStruct;
export interface ChannelPostReqStruct extends ChannelPostReqMix {
}
export {};
