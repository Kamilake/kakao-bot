import { StructBase } from "../../struct-base";
import { OpenStruct } from "./open-struct";
import { Long } from "bson";
import { ObjectMapper, Converter } from "json-proxy-mapper";
import { LinkReactionType } from "../../open/open-link-struct";
export interface OpenPostDataStruct extends StructBase {
    originalFileName: string;
    path: string;
    imagePaths: {
        originalImagePath: string;
        largeImagePath: string;
        smallImagePath: string;
    };
    width: number;
    height: number;
}
export declare enum OpenPostTagType {
    SHARP = 2
}
export interface OpenPostTagStruct extends StructBase {
    type: OpenPostTagType;
    text: string;
}
export declare namespace OpenPostTagStruct {
    const Mappings: {
        type: string;
        text: string;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenPostDescStruct extends StructBase {
    text: string;
    tagList: OpenPostTagStruct[];
}
export declare namespace OpenPostDescStruct {
    const Mappings: {
        text: string;
        tagList: string;
    };
    const ConvertMap: {
        tagList: Converter.Array<object>;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenPostReactionInfoStruct extends StructBase {
    type: LinkReactionType;
    count: number;
}
export interface OpenPostReactionStruct extends StructBase {
    reactionId: Long;
    linkId: Long;
    type: LinkReactionType;
    name: string;
    description: string;
    profileImageURL: string;
}
export declare namespace OpenPostReactionStruct {
    const Mappings: {
        reactionId: string;
        linkId: string;
        type: string;
        name: string;
        description: string;
        profileImageURL: string;
    };
    const ConvertMap: {
        linkId: import("json-proxy-mapper").TypeConverter<Long>;
        reactionId: import("json-proxy-mapper").TypeConverter<Long>;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenPostScrapData extends StructBase {
    url: string;
    canonicalUrl: string;
    title: string;
    contentType: string;
    mainImageUrl: string;
    description: string;
    suspected: number;
}
export interface OpenPostStruct extends StructBase {
    id: Long;
    linkId: Long;
    description?: OpenPostDescStruct;
    postDataList?: OpenPostDataStruct[];
    date: number;
    reactionInfoList?: OpenPostReactionInfoStruct[];
    reactionList?: OpenPostReactionStruct[];
    scrapData?: OpenPostScrapData;
    postURL: string;
    latestUpdateToken: number;
}
export declare namespace OpenPostStruct {
    const Mappings: {
        id: string;
        linkId: string;
        description: string;
        postDataList: string;
        date: string;
        postURL: string;
        reactionList: string;
        reactionUserList: string;
        scrapData: string;
        latestUpdateToken: string;
    };
    const ConvertMap: {
        linkId: import("json-proxy-mapper").TypeConverter<Long>;
        description: Converter.Object<object>;
        reactionUserList: Converter.Array<object>;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenPostListStruct extends OpenStruct {
    count: number;
    postList: OpenPostStruct[];
}
export declare namespace OpenPostListStruct {
    const Mappings: {
        count: string;
        postList: string;
    };
    const ConvertMap: {
        postList: Converter.Array<object>;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenPostReactStruct extends OpenStruct {
    postId: Long;
}
export declare namespace OpenPostReactStruct {
    const Mappings: {
        postId: string;
    };
    const ConvertMap: {
        postId: import("json-proxy-mapper").TypeConverter<Long>;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenPostReactNotiStruct extends OpenStruct {
    linkIdList: number[];
}
export declare namespace OpenPostReactNotiStruct {
    const Mappings: {
        linkIdList: string;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenPostApiStruct extends OpenStruct {
    post: OpenPostStruct;
}
export declare namespace OpenPostApiStruct {
    const Mappings: {
        post: string;
    };
    const ConvertMap: {
        post: Converter.Object<object>;
    };
    const MAPPER: ObjectMapper;
}
