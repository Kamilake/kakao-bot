import { StructBase } from "../struct-base";
import { Long } from "bson";
import { OpenLinkType, OpenMemberType, OpenProfileType } from "../../open/open-link-type";
import { Converter, ObjectMapper } from "json-proxy-mapper";
import { BaseMemberStruct, BaseChatMemberStruct } from "../member-struct";
export interface CommonOpenMemberStruct {
    memberType: OpenMemberType;
    linkId?: Long;
    openToken: number;
}
export interface OpenKickedMemberStruct extends BaseMemberStruct {
    kickedChannelId: Long;
    dc: boolean;
}
export declare namespace OpenKickedMemberStruct {
    const Mappings: {
        userId: string;
        nickname: string;
        profileImageUrl: string;
        kickedChannelId: string;
        dc: string;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenMemberStruct extends BaseChatMemberStruct, CommonOpenMemberStruct {
}
export declare namespace OpenMemberStruct {
    const Mappings: {
        userId: string;
        nickname: string;
        profileImageUrl: string;
        originalProfileImageUrl: string;
        fullProfileImageUrl: string;
        openToken: string;
        type: string;
        linkId: string;
        memberType: string;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenLinkMemberStruct extends OpenMemberStruct {
    profileType: OpenProfileType;
    linkId: Long;
    privilege: Long;
}
export declare namespace OpenLinkMemberStruct {
    const Mappings: {
        userId: string;
        nickname: string;
        profileImageUrl: string;
        originalProfileImageUrl: string;
        fullProfileImageUrl: string;
        memberType: string;
        profileType: string;
        linkId: string;
        openToken: string;
        privilege: string;
    };
    const MAPPER: ObjectMapper;
}
export declare enum OpenLinkTagType {
    DESCRIPTION = 1,
    HASH_TAG = 2
}
export interface OpenLinkTag {
    type: OpenLinkTagType;
    content: string;
}
export declare namespace OpenLinkTag {
    const Mappings: {
        type: string;
        content: string;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenLinkTagList {
    tags: OpenLinkTag[];
}
export declare namespace OpenLinkTagList {
    const Mappings: {
        tags: string;
    };
    const ConvertMap: {
        tags: Converter.Array<object>;
    };
    const MAPPER: ObjectMapper;
}
export interface OpenLinkStruct extends StructBase {
    linkId: Long;
    openToken: number;
    linkName: string;
    linkURL: string;
    linkType: OpenLinkType;
    createdAt: number;
    maxUserLimit?: number;
    maxChannelLimit?: number;
    passcode?: string;
    canSearchLink: boolean;
    activated: boolean;
    pushAlert: true;
    description: string;
    linkCoverURL: string;
    privilege: Long;
    owner: OpenMemberStruct;
    tagList: {
        tags?: OpenLinkTag[];
    };
}
export declare namespace OpenLinkStruct {
    const Mappings: {
        linkId: string;
        openToken: string;
        linkName: string;
        linkType: string;
        linkURL: string;
        linkCoverURL: string;
        createdAt: string;
        maxUserLimit: string;
        maxChannelLimit: string;
        activated: string;
        pushAlert: string;
        passcode: string;
        privilege: string;
        owner: string;
        description: string;
        canSearchLink: string;
        tagList: string;
    };
    const ConvertMap: {
        owner: Converter.Object<object>;
        tagList: Converter.Object<object>;
    };
    const MAPPER: ObjectMapper;
}
export declare enum LinkReactionType {
    NONE = 0,
    NORMAL = 1
}
export interface OpenLinkReactionInfo {
    reactionCount: number;
    reactionType: LinkReactionType;
}
export declare enum LinkPrivilegeMask {
    URL_SHARABLE = 2,
    REPORTABLE = 4,
    PROFILE_EDITABLE = 8,
    ANY_PROFILE_ALLOWED = 32,
    USE_PASS_CODE = 64,
    BLINDABLE = 128,
    NON_SPECIAL_LINK = 512,
    USE_BOT = 1024
}
