import { IdStore } from "../../store/store";
import { ChatChannel, OpenChatChannel, MemoChatChannel, NormalChatChannel } from "./chat-channel";
import { Long } from "bson";
import { LocoClient } from "../../client";
import { ChatUser } from "../user/chat-user";
import { ChannelInfoStruct } from "../struct/channel-info-struct";
import { ChannelDataStruct } from "../struct/channel-data-struct";
import { ChannelMetaType, ChannelClientMetaType, ChannelMetaStruct, PrivilegeMetaContent, ProfileMetaContent, TvLiveMetaContent, TvMetaContent, LiveTalkCountMetaContent, GroupMetaContent, BotMetaContent } from "../struct/channel-meta-struct";
import { ChannelSettings } from "./channel-settings";
import { OpenLinkTemplate } from "../open/open-link-template";
import { MemberStruct, DisplayMemberStruct } from "../struct/member-struct";
import { OpenMemberStruct } from "../struct/open/open-link-struct";
import { ManagedChatChannel, ManagedDisplayUserInfo } from "../managed/managed-chat-channel";
import { RequestResult } from "../request/request-result";
import { OpenProfileTemplates } from "../open/open-link-profile-template";
export declare class ChannelManager extends IdStore<ChatChannel> {
    private client;
    static readonly INFO_UPDATE_INTERVAL: number;
    constructor(client: LocoClient);
    get Client(): LocoClient;
    getChannelList(): ChatChannel[];
    findOpenChatChannel(linkId: Long): OpenChatChannel | null;
    protected addWithChannelData(id: Long, channelData: ChannelDataStruct): Promise<ManagedChatChannel>;
    addChannel(id: Long): Promise<ManagedChatChannel | null>;
    addWithChannelInfo(id: Long, channelInfo: ChannelInfoStruct): Promise<ManagedChatChannel>;
    protected initChannelInfo(channel: ManagedChatChannel, channelInfo: ChannelInfoStruct): void;
    protected updateUserInfoList(channel: ManagedChatChannel, memberList: (MemberStruct | OpenMemberStruct)[], openProfile?: OpenMemberStruct): void;
    protected getDisplayUserInfoFromStruct(memberStruct: DisplayMemberStruct): ManagedDisplayUserInfo;
    createMemoChannel(): Promise<RequestResult<MemoChatChannel>>;
    createChannel(users: ChatUser[], nickname?: string, profileURL?: string): Promise<RequestResult<ChatChannel>>;
    createOpenChannel(template: OpenLinkTemplate): Promise<RequestResult<OpenChatChannel>>;
    joinOpenChannel(linkId: Long, profileTemplate: OpenProfileTemplates, passcode?: string): Promise<RequestResult<OpenChatChannel>>;
    protected requestChannelInfo(channelId: Long): Promise<ChannelInfoStruct | null>;
    protected requestMemberList(channelId: Long): Promise<(MemberStruct | OpenMemberStruct)[] | null>;
    protected requestDetailedMemberList(channelId: Long, memberIdList?: Long[]): Promise<(MemberStruct | OpenMemberStruct)[] | null>;
    sendChatOn(channel: ChatChannel): Promise<RequestResult<boolean>>;
    leave(channel: ChatChannel, block?: boolean): Promise<RequestResult<boolean>>;
    leaveKicked(channel: OpenChatChannel): Promise<RequestResult<boolean>>;
    markRead(channel: ChatChannel, lastWatermark: Long): Promise<void>;
    inviteUser(channel: NormalChatChannel, user: ChatUser): Promise<RequestResult<boolean>>;
    inviteUserId(channel: NormalChatChannel, userId: Long): Promise<RequestResult<boolean>>;
    inviteUserList(channel: NormalChatChannel, userList: ChatUser[]): Promise<RequestResult<boolean>>;
    inviteUserIdList(channel: NormalChatChannel, userIdList: Long[]): Promise<RequestResult<boolean>>;
    updateChannelSettings(channel: ChatChannel, settings: ChannelSettings): Promise<RequestResult<boolean>>;
    requestChannelMeta(channel: ChatChannel, type: ChannelMetaType): Promise<RequestResult<ChannelMetaStruct>>;
    requestChannelMetaList(channel: ChatChannel): Promise<RequestResult<ChannelMetaStruct[]>>;
    updateChannelMeta(channel: ChatChannel, type: ChannelMetaType, content: string): Promise<RequestResult<boolean>>;
    updateChannelClientMeta(channel: ChatChannel, type: ChannelClientMetaType, content: string): Promise<RequestResult<boolean>>;
    setTitleMeta(channel: ChatChannel, title: string): Promise<RequestResult<boolean>>;
    setNoticeMeta(channel: ChatChannel, notice: string): Promise<RequestResult<boolean>>;
    setPrivilegeMeta(channel: ChatChannel, content: PrivilegeMetaContent): Promise<RequestResult<boolean>>;
    setProfileMeta(channel: ChatChannel, content: ProfileMetaContent): Promise<RequestResult<boolean>>;
    setTvMeta(channel: ChatChannel, content: TvMetaContent): Promise<RequestResult<boolean>>;
    setTvLiveMeta(channel: ChatChannel, content: TvLiveMetaContent): Promise<RequestResult<boolean>>;
    setLiveTalkCountMeta(channel: ChatChannel, content: LiveTalkCountMetaContent): Promise<RequestResult<boolean>>;
    setGroupMeta(channel: ChatChannel, content: GroupMetaContent): Promise<RequestResult<boolean>>;
    setBotMeta(channel: ChatChannel, content: BotMetaContent): Promise<RequestResult<boolean>>;
    removeChannel(channelId: Long): boolean;
    protected initWithChannelData(channelData: ChannelDataStruct): Promise<ManagedChatChannel>;
    initializeLoginData(chatDataList: ChannelDataStruct[]): Promise<ManagedChatChannel[]>;
}
