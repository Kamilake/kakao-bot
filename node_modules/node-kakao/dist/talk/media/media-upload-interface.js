"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaUploadInterface = void 0;
const bson_1 = require("bson");
const loco_interface_1 = require("../../loco/loco-interface");
const loco_packet_base_1 = require("../../packet/loco-packet-base");
const packet_post_1 = require("../../packet/media/packet-post");
const promise_ticket_1 = require("../../ticket/promise-ticket");
const packet_multi_post_1 = require("../../packet/media/packet-multi-post");
class MediaUploadInterface extends loco_interface_1.LocoSecureCommandInterface {
    constructor(hostData, listener = null, configProvider) {
        super(hostData, listener, configProvider);
        this.uploading = false;
        this.ticketObj = new promise_ticket_1.PromiseTicket();
    }
    get Uploading() {
        return this.uploading;
    }
    responseReceived(header, data) {
        let res = super.responseReceived(header, data);
        if (res.PacketName === 'COMPLETE') {
            this.uploading = false;
            if (res.StatusCode !== loco_packet_base_1.StatusCode.SUCCESS) {
                this.ticketObj.reject(res.StatusCode);
            }
            else {
                this.ticketObj.resolve(res);
            }
            this.disconnect();
        }
        return res;
    }
    async uploadRawBuffer(offset, data) {
        this.uploading = true;
        let rawSocket = this.Socket;
        let buf;
        if (offset.toNumber() > 0) {
            buf = Buffer.alloc(data.length + offset.toNumber());
            data.copy(buf, offset.toNumber());
        }
        else {
            buf = data;
        }
        rawSocket.sendBuffer(buf);
        return this.ticketObj.createTicket();
    }
    async upload(clientUserId, key, channelId, type, name, data, width, height) {
        if (this.uploading) {
            throw new Error(`Uploading already started`);
        }
        if (!this.Connected)
            await this.connect();
        let config = this.ConfigProvider.Configuration;
        let postRes = await this.requestPacketRes(new packet_post_1.PacketPostReq(key, bson_1.Long.fromNumber(data.byteLength), name, width, height, channelId, type, bson_1.Long.fromNumber(1172892), true, clientUserId, config.agent, config.version, config.netType, config.mccmnc));
        return this.uploadRawBuffer(postRes.Offset, data);
    }
    async uploadMulti(clientUserId, key, type, data) {
        if (this.uploading) {
            throw new Error(`Uploading already started`);
        }
        if (!this.Connected)
            await this.connect();
        let config = this.ConfigProvider.Configuration;
        let postRes = await this.requestPacketRes(new packet_multi_post_1.PacketMultiPostReq(key, bson_1.Long.fromNumber(data.byteLength), type, clientUserId, config.agent, config.version, config.netType, config.mccmnc));
        return this.uploadRawBuffer(postRes.Offset, data);
    }
}
exports.MediaUploadInterface = MediaUploadInterface;
//# sourceMappingURL=media-upload-interface.js.map