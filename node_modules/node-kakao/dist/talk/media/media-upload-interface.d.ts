/// <reference types="node" />
import { Long } from "bson";
import { ClientConfigProvider } from "../../config/client-config-provider";
import { LocoListener, LocoSecureCommandInterface } from "../../loco/loco-interface";
import { HostData } from "../../network/host-data";
import { LocoResponsePacket } from "../../packet/loco-packet-base";
import { PacketCompleteRes } from "../../packet/media/packet-complete";
import { PacketHeader } from "../../packet/packet-header-struct";
import { ChatType } from "../chat/chat-type";
export declare class MediaUploadInterface extends LocoSecureCommandInterface {
    private uploading;
    private ticketObj;
    constructor(hostData: HostData, listener: LocoListener | null | undefined, configProvider: ClientConfigProvider);
    get Uploading(): boolean;
    responseReceived(header: PacketHeader, data: Buffer): LocoResponsePacket;
    protected uploadRawBuffer(offset: Long, data: Buffer): Promise<PacketCompleteRes>;
    upload(clientUserId: Long, key: string, channelId: Long, type: ChatType, name: string, data: Buffer, width: number, height: number): Promise<PacketCompleteRes>;
    uploadMulti(clientUserId: Long, key: string, type: ChatType, data: Buffer): Promise<PacketCompleteRes>;
}
