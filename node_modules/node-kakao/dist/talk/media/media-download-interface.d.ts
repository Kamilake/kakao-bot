/// <reference types="node" />
import { Long } from "bson";
import { Socket } from "net";
import { Transform, TransformCallback } from "stream";
import { ClientConfigProvider } from "../../config/client-config-provider";
import { LocoListener, LocoSecureCommandInterface } from "../../loco/loco-interface";
import { ChunkedBufferList } from "../../network/chunk/chunked-buffer-list";
import { HostData } from "../../network/host-data";
import { LocoSecureSocket } from "../../network/loco-secure-socket";
import { LocoSocket } from "../../network/loco-socket";
import { PacketDownReq } from "../../packet/media/packet-down";
import { PacketMiniReq } from "../../packet/media/packet-mini";
export declare class MediaDownloadInterface extends LocoSecureCommandInterface {
    private downloading;
    private size;
    private receiver;
    private ticketObj;
    constructor(hostData: HostData, listener: LocoListener | null | undefined, configProvider: ClientConfigProvider);
    get Downloading(): boolean;
    get Size(): number;
    get DataReceiver(): MediaDataReceiver;
    protected createSocket(hostData: HostData): LocoSocket;
    downloadDone(buffer: Buffer): void;
    download(clientUserId: Long, key: string, channelId: Long): Promise<Buffer | null>;
    downloadThumbnail(clientUserId: Long, key: string, channelId: Long): Promise<Buffer | null>;
    protected requestDownload(req: PacketMiniReq | PacketDownReq): Promise<Buffer | null>;
}
export declare class SecureDownloadSocket extends LocoSecureSocket {
    private downloader;
    constructor(pubKey: string, receiver: MediaDownloadInterface, host: string, port: number, keepAlive: boolean);
    pipeTranformation(socket: Socket): void;
}
export declare class MediaDataReceiver extends Transform {
    private downloader;
    private chunkList;
    constructor(downloader: MediaDownloadInterface);
    get ChunkList(): ChunkedBufferList;
    _destroy(error: Error | null, callback: (error: Error | null) => void): void;
    _transform(chunk: Buffer, encoding?: string, callback?: TransformCallback): void;
}
