/// <reference types="node" />
import { Long } from "bson";
import { EventEmitter } from "events";
import { AuthClient } from "./api/auth-client";
import { ChannelBoardClient, OpenChannelBoardClient } from "./api/channel-board-client";
import { OpenChatClient } from "./api/open-chat-client";
import { OpenUploadApi } from "./api/open-upload-api";
import { ServiceClient } from "./api/service-client";
import { ClientStatus } from "./client-status";
import { ClientConfig } from "./config/client-config";
import { ClientConfigProvider, DefaultClientConfigProvider } from "./config/client-config-provider";
import { ClientEvents } from "./event/events";
import { NetworkManager } from "./network/network-manager";
import { ChannelManager } from "./talk/channel/channel-manager";
import { MemoChatChannel } from "./talk/channel/chat-channel";
import { ChatManager } from "./talk/chat/chat-manager";
import { OpenLinkManager } from "./talk/open/open-link-manager";
import { RequestResult } from "./talk/request/request-result";
import { MoreSettingsStruct } from "./talk/struct/api/account/client-settings-struct";
import { ClientChatUser, ClientUserInfo } from "./talk/user/chat-user";
import { UserManager } from "./talk/user/user-manager";
import { UserType } from "./talk/user/user-type";
export interface LoginError {
    status: number;
    message?: string;
}
export interface ApiClient {
    readonly Name: string;
    ConfigProvider: ClientConfigProvider;
    readonly Auth: AuthClient;
    readonly Service: ServiceClient;
    readonly OpenChat: OpenChatClient;
    readonly OpenUploadApi: OpenUploadApi;
    readonly ChannelBoard: ChannelBoardClient;
    readonly OpenChannelBoard: OpenChannelBoardClient;
    readonly Logon: boolean;
    login(email: string, password: string, forced?: boolean): Promise<void>;
    loginToken(email: string, token: string, forced?: boolean, locked?: boolean): Promise<void>;
    relogin(): Promise<void>;
    logout(): void;
}
export interface LocoClient extends ApiClient, ClientEvents {
    readonly NetworkManager: NetworkManager;
    readonly ChannelManager: ChannelManager;
    readonly UserManager: UserManager;
    readonly ChatManager: ChatManager;
    readonly OpenLinkManager: OpenLinkManager;
    readonly ClientUser: ClientChatUser;
    readonly LocoLogon: boolean;
    setStatus(status: ClientStatus): Promise<RequestResult<boolean>>;
    getStatus(): ClientStatus;
    updateStatus(): Promise<RequestResult<boolean>>;
}
export declare class TalkApiClient extends EventEmitter implements ApiClient {
    private configProvider;
    private auth;
    private service;
    private openchatWeb;
    private openUploadApi;
    private channelBoard;
    private openChannelBoard;
    constructor(name: string, deviceUUID: string, config?: Partial<ClientConfig>);
    get Name(): string;
    get ConfigProvider(): DefaultClientConfigProvider;
    set ConfigProvider(provider: DefaultClientConfigProvider);
    get Auth(): AuthClient;
    get Service(): ServiceClient;
    get OpenChat(): OpenChatClient;
    get OpenUploadApi(): OpenUploadApi;
    get ChannelBoard(): ChannelBoardClient;
    get OpenChannelBoard(): OpenChannelBoardClient;
    get Logon(): boolean;
    login(email: string, password: string, forced?: boolean): Promise<void>;
    loginToken(email: string, token: string, forced?: boolean, locked?: boolean): Promise<void>;
    relogin(): Promise<void>;
    logout(): void;
}
export declare class TalkClient extends TalkApiClient implements LocoClient {
    private networkManager;
    private clientUser;
    private channelManager;
    private userManager;
    private chatManager;
    private openLinkManager;
    private status;
    constructor(name: string, deviceUUID: string, config?: Partial<ClientConfig>);
    get NetworkManager(): NetworkManager;
    get ChannelManager(): ChannelManager;
    get UserManager(): UserManager;
    get ChatManager(): ChatManager;
    get OpenLinkManager(): OpenLinkManager;
    get LocoLogon(): boolean;
    get ClientUser(): ClientChatUser;
    login(email: string, password: string, forced?: boolean): Promise<void>;
    loginToken(email: string, token: string, forced?: boolean, locked?: boolean): Promise<void>;
    relogin(): Promise<void>;
    protected locoLogin(): Promise<void>;
    setStatus(status: ClientStatus): Promise<RequestResult<boolean>>;
    updateStatus(): Promise<RequestResult<boolean>>;
    getStatus(): ClientStatus;
    logout(): void;
}
export declare class TalkClientChatUser extends EventEmitter implements ClientChatUser {
    private mainOpenToken;
    private client;
    private id;
    private mainUserInfo;
    constructor(client: TalkClient, id: Long, settings: MoreSettingsStruct, mainOpenToken: number);
    get Client(): LocoClient;
    get Id(): Long;
    get MainUserInfo(): ClientUserInfo;
    get MainOpenToken(): number;
    get Nickname(): string;
    createDM(): Promise<RequestResult<MemoChatChannel>>;
    isClientUser(): boolean;
}
export declare class TalkClientUserInfo implements ClientUserInfo {
    private user;
    private settings;
    constructor(user: TalkClientChatUser, settings: MoreSettingsStruct);
    get Client(): LocoClient;
    get User(): TalkClientChatUser;
    get Id(): Long;
    get AccountId(): number;
    get Nickname(): string;
    get UserType(): UserType;
    get ProfileImageURL(): string;
    get FullProfileImageURL(): string;
    get OriginalProfileImageURL(): string;
    get EmailAddress(): string;
    get AccountDisplayId(): string;
    get TalkId(): string;
    get StatusMessage(): string;
    get NsnPhoneNumber(): string;
    get PstnPhoneNumber(): string;
    get FormattedNsnPhoneNumber(): string;
    get FormattedPstnPhoneNumber(): string;
    isOpenUser(): false;
}
