"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KakaoAPI = void 0;
const axios_1 = require("axios");
const FormData = require("form-data");
const api_header_decorator_1 = require("./api/api-header-decorator");
class KakaoAPI {
    static get InternalProtocol() {
        return 'https';
    }
    static get ProfileUploadHost() {
        return `up-p.talk.kakao.com`;
    }
    static get MediaUploadHost() {
        return `up-m.talk.kakao.com`;
    }
    static get VideoUploadHost() {
        return `up-v.talk.kakao.com`;
    }
    static get AudioUploadHost() {
        return `up-a.talk.kakao.com`;
    }
    static get GroupProfileUploadHost() {
        return `up-gp.talk.kakao.com`;
    }
    static get FileHost() {
        return 'dn.talk.kakao.com';
    }
    static get MediaFileHost() {
        return 'dn-m.talk.kakao.com';
    }
    static get AudioFileHost() {
        return 'dn-a.talk.kakao.com';
    }
    static get VideoFileHost() {
        return 'dn-v.talk.kakao.com';
    }
    static get MediaFileURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.MediaFileHost}`;
    }
    static get ProfileFileURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.MediaFileHost}`;
    }
    static get GroupProfileFileURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.MediaFileHost}`;
    }
    static get VideoFileURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.VideoFileHost}`;
    }
    static get AudioFileURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.AudioFileHost}`;
    }
    static get FileFileURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.FileHost}`;
    }
    static get MediaUploadURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.MediaUploadHost}/upload`;
    }
    static get ProfileUploadURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.ProfileUploadHost}/upload`;
    }
    static get GroupProfileUploadURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.GroupProfileUploadHost}/upload`;
    }
    static get VideoUploadURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.VideoUploadHost}/upload`;
    }
    static get AudioUploadURL() {
        return `${KakaoAPI.InternalProtocol}://${KakaoAPI.AudioUploadHost}/upload`;
    }
    static async uploadProfile(img, name, userId = -1) {
        let formData = new FormData();
        formData.append('user_id', userId.toString());
        formData.append('photo', img, { filename: name });
        let res = await axios_1.default.request({
            url: KakaoAPI.ProfileUploadURL,
            method: 'POST',
            data: formData,
            responseType: 'text'
        });
        return res.data;
    }
    static getUploadURL(type) {
        switch (type) {
            case this.AttachmentType.IMAGE:
                return KakaoAPI.MediaUploadURL;
            case this.AttachmentType.AUDIO:
                return KakaoAPI.AudioUploadURL;
            case this.AttachmentType.VIDEO:
                return KakaoAPI.VideoUploadURL;
            default:
                return KakaoAPI.MediaUploadURL;
        }
    }
    static getAttachmentURL(type) {
        switch (type) {
            case this.AttachmentType.IMAGE:
                return KakaoAPI.MediaFileURL;
            case this.AttachmentType.AUDIO:
                return KakaoAPI.AudioFileURL;
            case this.AttachmentType.VIDEO:
                return KakaoAPI.VideoFileURL;
            case this.AttachmentType.FILE:
                return KakaoAPI.MediaFileURL;
            default:
                return KakaoAPI.MediaFileURL;
        }
    }
    static async uploadAttachment(type, attachment, name, userId = -1) {
        let formData = new FormData();
        formData.append('user_id', userId.toString());
        formData.append('attachment_type', type);
        formData.append('attachment', attachment, { filename: name });
        let headers = {};
        api_header_decorator_1.AHeaderDecorator.INSTANCE.fillHeader(headers);
        let req = axios_1.default.request({
            url: KakaoAPI.getUploadURL(type),
            method: 'POST',
            headers: headers,
            data: formData,
            responseType: 'json'
        });
        let res = await req;
        let data = await res.data;
        try {
            return data['path'];
        }
        catch (e) {
            return '';
        }
    }
    static getUploadedFile(uploadPath, type) {
        return `${this.getAttachmentURL(type)}${uploadPath}`;
    }
    static getUploadedFileKey(uploadPath) {
        return uploadPath.replace(/\/talk(m|p|gp|v|a)/, '');
    }
    static getEmoticonHeader(screenWidth = 1080, screenHeight = 1920) {
        return {
            'RESOLUTION': `${screenWidth}x${screenHeight}`,
        };
    }
    static getEmoticonURL(lang = 'kr') {
        return `http://item-${lang}.talk.kakao.co.kr/dw`;
    }
    static getEmoticonImageURL(path, lang = 'kr') {
        return `${KakaoAPI.getEmoticonURL(lang)}/${path}`;
    }
    static getEmoticonTitleURL(id, type = 'png', lang = 'kr') {
        return `${KakaoAPI.getEmoticonURL(lang)}/${id}.title.${type}`;
    }
    static getEmoticonPackURL(id, lang = 'kr') {
        return `${KakaoAPI.getEmoticonURL(lang)}/${id}.file_pack.zip`;
    }
    static getEmoticonThumbnailPackURL(id, lang = 'kr') {
        return `${KakaoAPI.getEmoticonURL(lang)}/${id}.thum_pack.zip`;
    }
    static getEmoticonImage(path, lang = 'kr') {
        return axios_1.default.get(KakaoAPI.getEmoticonImageURL(path, lang), {
            headers: KakaoAPI.getEmoticonHeader(),
        });
    }
    static getEmoticonPack(id, lang = 'kr') {
        return axios_1.default.get(KakaoAPI.getEmoticonPackURL(id, lang), {
            headers: KakaoAPI.getEmoticonHeader()
        });
    }
    static getEmoticonThumbnailPack(id, lang = 'kr') {
        return axios_1.default.get(KakaoAPI.getEmoticonThumbnailPackURL(id, lang), {
            headers: KakaoAPI.getEmoticonHeader()
        });
    }
}
exports.KakaoAPI = KakaoAPI;
(function (KakaoAPI) {
    let AttachmentType;
    (function (AttachmentType) {
        AttachmentType["IMAGE"] = "image/jpeg";
        AttachmentType["AUDIO"] = "audio/mp4";
        AttachmentType["VIDEO"] = "video/mp4";
        AttachmentType["FILE"] = "image/jpeg";
    })(AttachmentType = KakaoAPI.AttachmentType || (KakaoAPI.AttachmentType = {}));
})(KakaoAPI = exports.KakaoAPI || (exports.KakaoAPI = {}));
//# sourceMappingURL=kakao-api.js.map