"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketMultiPostRes = exports.PacketMultiPostReq = void 0;
const media_request_base_packet_1 = require("./media-request-base-packet");
const bson_1 = require("bson");
const chat_type_1 = require("../../talk/chat/chat-type");
const loco_bson_packet_1 = require("../loco-bson-packet");
const json_util_1 = require("../../util/json-util");
class PacketMultiPostReq extends media_request_base_packet_1.MediaRequestBasePacket {
    constructor(Key = '', Size = bson_1.Long.ZERO, Type = chat_type_1.ChatType.Unknown, userId = bson_1.Long.ZERO, os = '', version = '', networkType = 0, networkMccMnc = '') {
        super(userId, os, version, networkType, networkMccMnc);
        this.Key = Key;
        this.Size = Size;
        this.Type = Type;
    }
    get PacketName() {
        return 'MPOST';
    }
    toBodyJson() {
        return Object.assign({
            'k': this.Key,
            's': this.Size,
            't': this.Type
        }, super.toBodyJson());
    }
}
exports.PacketMultiPostReq = PacketMultiPostReq;
class PacketMultiPostRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, Offset = bson_1.Long.ZERO) {
        super(status);
        this.Offset = Offset;
    }
    get PacketName() {
        return 'MPOST';
    }
    readBodyJson(rawData) {
        this.Offset = json_util_1.JsonUtil.readLong(rawData['o']);
    }
}
exports.PacketMultiPostRes = PacketMultiPostRes;
//# sourceMappingURL=packet-multi-post.js.map