"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketPostRes = exports.PacketPostReq = void 0;
const bson_1 = require("bson");
const chat_type_1 = require("../../talk/chat/chat-type");
const json_util_1 = require("../../util/json-util");
const loco_bson_packet_1 = require("../loco-bson-packet");
const media_request_base_packet_1 = require("./media-request-base-packet");
class PacketPostReq extends media_request_base_packet_1.MediaRequestBasePacket {
    constructor(Key = '', Size = bson_1.Long.ZERO, Name = '', Width = 0, Height = 0, ChannelId = bson_1.Long.ZERO, Type = chat_type_1.ChatType.Unknown, MessageId = bson_1.Long.ZERO, NoSeen = false, userId = bson_1.Long.ZERO, os = '', version = '', networkType = 0, networkMccMnc = '') {
        super(userId, os, version, networkType, networkMccMnc);
        this.Key = Key;
        this.Size = Size;
        this.Name = Name;
        this.Width = Width;
        this.Height = Height;
        this.ChannelId = ChannelId;
        this.Type = Type;
        this.MessageId = MessageId;
        this.NoSeen = NoSeen;
    }
    get PacketName() {
        return 'POST';
    }
    toBodyJson() {
        let obj = {
            'k': this.Key,
            's': this.Size,
            'f': this.Name,
            'w': this.Width,
            'h': this.Height,
            'c': this.ChannelId,
            't': this.Type,
            'mid': this.MessageId,
            'ns': this.NoSeen,
        };
        return Object.assign(obj, super.toBodyJson());
    }
}
exports.PacketPostReq = PacketPostReq;
class PacketPostRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, Offset = bson_1.Long.ZERO) {
        super(status);
        this.Offset = Offset;
    }
    get PacketName() {
        return 'POST';
    }
    readBodyJson(rawData) {
        this.Offset = json_util_1.JsonUtil.readLong(rawData['o']);
    }
}
exports.PacketPostRes = PacketPostRes;
//# sourceMappingURL=packet-post.js.map