"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketMultiShipRes = exports.PacketMultiShipReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const bson_1 = require("bson");
const chat_type_1 = require("../talk/chat/chat-type");
class PacketMultiShipReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelId = bson_1.Long.ZERO, Type = chat_type_1.ChatType.Unknown, SizeList = [], ChecksumList = [], ExtList = []) {
        super();
        this.ChannelId = ChannelId;
        this.Type = Type;
        this.SizeList = SizeList;
        this.ChecksumList = ChecksumList;
        this.ExtList = ExtList;
    }
    get PacketName() {
        return 'MSHIP';
    }
    toBodyJson() {
        return {
            'c': this.ChannelId,
            't': this.Type,
            'sl': this.SizeList,
            'csl': this.ChecksumList,
            'el': this.ExtList
        };
    }
}
exports.PacketMultiShipReq = PacketMultiShipReq;
class PacketMultiShipRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, KeyList = [], HostList = [], PortList = [], VHostList = [], VHostV6List = [], MimeTypeList = []) {
        super(status);
        this.KeyList = KeyList;
        this.HostList = HostList;
        this.PortList = PortList;
        this.VHostList = VHostList;
        this.VHostV6List = VHostV6List;
        this.MimeTypeList = MimeTypeList;
    }
    get PacketName() {
        return 'MSHIP';
    }
    readBodyJson(rawBody) {
        if (rawBody['kl'])
            this.KeyList = rawBody['kl'];
        if (rawBody['hl'])
            this.HostList = rawBody['hl'];
        if (rawBody['pl'])
            this.PortList = rawBody['pl'];
        if (rawBody['vhl'])
            this.VHostList = rawBody['vhl'];
        if (rawBody['vh6l'])
            this.VHostV6List = rawBody['vh6l'];
        if (rawBody['mtl'])
            this.MimeTypeList = rawBody['mtl'];
    }
}
exports.PacketMultiShipRes = PacketMultiShipRes;
//# sourceMappingURL=packet-multi-ship.js.map