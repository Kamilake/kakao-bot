"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocoPacketList = void 0;
const packet_get_conf_1 = require("./booking/packet-get-conf");
const packet_check_in_1 = require("./checkin/packet-check-in");
const packet_login_1 = require("./packet-login");
const packet_message_1 = require("./packet-message");
const packet_message_read_1 = require("./packet-message-read");
const packet_kickout_1 = require("./packet-kickout");
const packet_invoice_1 = require("./packet-invoice");
const packet_new_member_1 = require("./packet-new-member");
const packet_leave_1 = require("./packet-leave");
const packet_chat_member_1 = require("./packet-chat-member");
const packet_channel_info_1 = require("./packet-channel-info");
const packet_sync_join_channel_1 = require("./packet-sync-join-channel");
const packet_get_member_1 = require("./packet-get-member");
const loco_bson_packet_1 = require("./loco-bson-packet");
const packet_get_meta_1 = require("./packet-get-meta");
const packet_get_channel_board_meta_1 = require("./packet-get-channel-board-meta");
const packet_sync_link_1 = require("./packet-sync-link");
const packet_rewrite_1 = require("./packet-rewrite");
const packet_kick_member_1 = require("./packet-kick-member");
const packet_delete_link_1 = require("./packet-delete-link");
const packet_delete_chat_1 = require("./packet-delete-chat");
const packet_member_1 = require("./packet-member");
const packet_ping_1 = require("./packet-ping");
const packet_info_link_1 = require("./packet-info-link");
const packet_create_channel_1 = require("./packet-create-channel");
const packet_sync_join_openchat_1 = require("./packet-sync-join-openchat");
const packet_delmem_1 = require("./packet-delmem");
const packet_noti_read_1 = require("./packet-noti-read");
const packet_join_info_1 = require("./packet-join-info");
const packet_set_mem_type_1 = require("./packet-set-mem-type");
const packet_link_kicked_1 = require("./packet-link-kicked");
const packet_join_link_1 = require("./packet-join-link");
const packet_update_link_profile_1 = require("./packet-update-link-profile");
const packet_sync_member_type_1 = require("./packet-sync-member-type");
const packet_chat_on_room_1 = require("./packet-chat-on-room");
const packet_sync_profile_1 = require("./packet-sync-profile");
const packet_sync_delete_message_1 = require("./packet-sync-delete-message");
const packet_sync_message_1 = require("./packet-sync-message");
const packet_get_trailer_1 = require("./packet-get-trailer");
const packet_ship_1 = require("./packet-ship");
const packet_get_token_1 = require("./packet-get-token");
const packet_multi_chatlog_1 = require("./packet-multi-chatlog");
const packet_set_status_1 = require("./packet-set-status");
const packet_update_channel_1 = require("./packet-update-channel");
const packet_buy_call_server_1 = require("./checkin/packet-buy-call-server");
const packet_channel_list_1 = require("./packet-channel-list");
const packet_set_meta_1 = require("./packet-set-meta");
const packet_set_client_meta_1 = require("./packet-set-client-meta");
const packet_meta_change_1 = require("./packet-meta-change");
const packet_get_client_meta_1 = require("./packet-get-client-meta");
const packet_change_server_1 = require("./packet-change-server");
const packet_complete_1 = require("./media/packet-complete");
const packet_post_1 = require("./media/packet-post");
const packet_mini_1 = require("./media/packet-mini");
const packet_down_1 = require("./media/packet-down");
const packet_create_open_link_1 = require("./packet-create-open-link");
const packet_update_link_1 = require("./packet-update-link");
const packet_kick_list_del_item_1 = require("./packet-kick-list-del-item");
const packet_kick_list_sync_1 = require("./packet-kick-list-sync");
const packet_reaction_count_1 = require("./packet-reaction-count");
const packet_react_1 = require("./packet-react");
const packet_sync_rewrite_1 = require("./packet-sync-rewrite");
const packet_link_deleted_1 = require("./packet-link-deleted");
const packet_add_member_1 = require("./packet-add-member");
const packet_relay_event_1 = require("./packet-relay-event");
const packet_kick_leave_1 = require("./packet-kick-leave");
const packet_multi_post_1 = require("./media/packet-multi-post");
const packet_multi_ship_1 = require("./packet-multi-ship");
const packet_forward_1 = require("./packet-forward");
const packet_check_join_1 = require("./packet-check-join");
var LocoPacketList;
(function (LocoPacketList) {
    let requestPacketMap = new Map();
    let responsePacketMap = new Map();
    let defaultBodyReqPacketMap = new Map();
    let defaultBodyResPacketMap;
    function initReqMap() {
        defaultBodyReqPacketMap.set(0, loco_bson_packet_1.DefaultBsonRequestPacket);
        requestPacketMap.set('GETCONF', packet_get_conf_1.PacketGetConfReq);
        requestPacketMap.set('CHECKIN', packet_check_in_1.PacketCheckInReq);
        requestPacketMap.set('BUYCS', packet_buy_call_server_1.PacketBuyCallServerReq);
        requestPacketMap.set('LCHATLIST', packet_channel_list_1.PacketChannelListReq);
        requestPacketMap.set('LOGINLIST', packet_login_1.PacketLoginReq);
        requestPacketMap.set('SETST', packet_set_status_1.PacketSetStatusReq);
        requestPacketMap.set('GETTOKEN', packet_get_token_1.PacketGetToken);
        requestPacketMap.set('MCHATLOGS', packet_multi_chatlog_1.PacketMultiChatlogReq);
        requestPacketMap.set('WRITE', packet_message_1.PacketMessageWriteReq);
        requestPacketMap.set('FORWARD', packet_forward_1.PacketForwardReq);
        requestPacketMap.set('MEMBER', packet_chat_member_1.PacketChatMemberReq);
        requestPacketMap.set('CHATINFO', packet_channel_info_1.PacketChannelInfoReq);
        requestPacketMap.set('ADDMEM', packet_add_member_1.PacketAddMemberReq);
        requestPacketMap.set('UPDATECHAT', packet_update_channel_1.PacketUpdateChannelReq);
        requestPacketMap.set('GETTRAILER', packet_get_trailer_1.PacketGetTrailerReq);
        requestPacketMap.set('SHIP', packet_ship_1.PacketShipReq);
        requestPacketMap.set('POST', packet_post_1.PacketPostReq);
        requestPacketMap.set('MSHIP', packet_multi_ship_1.PacketMultiShipReq);
        requestPacketMap.set('MPOST', packet_multi_post_1.PacketMultiPostReq);
        requestPacketMap.set('MINI', packet_mini_1.PacketMiniReq);
        requestPacketMap.set('DOWN', packet_down_1.PacketDownReq);
        requestPacketMap.set('RELAYEVENT', packet_relay_event_1.PacketRelayEventReq);
        requestPacketMap.set('GETMETA', packet_get_meta_1.PacketGetMetaReq);
        requestPacketMap.set('GETMCMETA', packet_get_client_meta_1.PacketGetClientMetaReq);
        requestPacketMap.set('GETMETAS', packet_get_meta_1.PacketGetMetaListReq);
        requestPacketMap.set('SETMETA', packet_set_meta_1.PacketSetMetaReq);
        requestPacketMap.set('SETMCMETA', packet_set_client_meta_1.PacketSetClientMetaReq);
        requestPacketMap.set('GETMEM', packet_get_member_1.PacketGetMemberReq);
        requestPacketMap.set('MEMBER', packet_member_1.PacketMemberReq);
        requestPacketMap.set('GETMOMETA', packet_get_channel_board_meta_1.PacketGetChannelBoardMetaReq);
        requestPacketMap.set('SYNCLINK', packet_sync_link_1.PacketSyncLinkReq);
        requestPacketMap.set('REWRITE', packet_rewrite_1.PacketRewriteReq);
        requestPacketMap.set('CREATE', packet_create_channel_1.PacketCreateChannelReq);
        requestPacketMap.set('KICKMEM', packet_kick_member_1.PacketKickMemberReq);
        requestPacketMap.set('KLSYNC', packet_kick_list_sync_1.PacketKickListSyncReq);
        requestPacketMap.set('KLDELITEM', packet_kick_list_del_item_1.PacketKickListDelItemReq);
        requestPacketMap.set('DELETELINK', packet_delete_link_1.PacketDeleteLinkReq);
        requestPacketMap.set('INFOLINK', packet_info_link_1.PacketInfoLinkReq);
        requestPacketMap.set('JOININFO', packet_join_info_1.PacketJoinInfoReq);
        requestPacketMap.set('SETMEMTYPE', packet_set_mem_type_1.PacketSetMemTypeReq);
        requestPacketMap.set('JOINLINK', packet_join_link_1.PacketJoinLinkReq);
        requestPacketMap.set('CHECKJOIN', packet_check_join_1.PacketCheckJoinReq);
        requestPacketMap.set('UPLINKPROF', packet_update_link_profile_1.PacketUpdateLinkProfileReq);
        requestPacketMap.set('SYNCMSG', packet_sync_message_1.PacketSyncMessageReq);
        requestPacketMap.set('DELETEMSG', packet_delete_link_1.PacketDeleteLinkReq);
        requestPacketMap.set('NOTIREAD', packet_noti_read_1.PacketMessageNotiReadReq);
        requestPacketMap.set('CHATONROOM', packet_chat_on_room_1.PacketChatOnRoomReq);
        requestPacketMap.set('REACTCNT', packet_reaction_count_1.PacketReactionCountReq);
        requestPacketMap.set('REACT', packet_react_1.PacketReactReq);
        requestPacketMap.set('PING', packet_ping_1.PacketPingReq);
        requestPacketMap.set('LEAVE', packet_leave_1.PacketLeaveReq);
        requestPacketMap.set('KICKLEAVE', packet_kick_leave_1.PacketKickLeaveReq);
        requestPacketMap.set('CREATELINK', packet_create_open_link_1.PacketCreateOpenLinkReq);
        requestPacketMap.set('UPDATELINK', packet_update_link_1.PacketUpdateOpenLinkReq);
    }
    function initResMap() {
        responsePacketMap = new Map();
        defaultBodyResPacketMap = new Map();
        defaultBodyResPacketMap.set(0, loco_bson_packet_1.DefaultBsonResponsePacket);
        defaultBodyResPacketMap.set(8, loco_bson_packet_1.DefaultBsonResponsePacket);
        responsePacketMap.set('GETCONF', packet_get_conf_1.PacketGetConfRes);
        responsePacketMap.set('CHECKIN', packet_check_in_1.PacketCheckInRes);
        responsePacketMap.set('BUYCS', packet_buy_call_server_1.PacketBuyCallServerRes);
        responsePacketMap.set('LCHATLIST', packet_channel_list_1.PacketChannelListRes);
        responsePacketMap.set('LOGINLIST', packet_login_1.PacketLoginRes);
        responsePacketMap.set('SETST', packet_set_status_1.PacketSetStatusRes);
        responsePacketMap.set('MCHATLOGS', packet_multi_chatlog_1.PacketMultiChatlogRes);
        responsePacketMap.set('MSG', packet_message_1.PacketMessageRes);
        responsePacketMap.set('WRITE', packet_message_1.PacketMessageWriteRes);
        responsePacketMap.set('FORWARD', packet_forward_1.PacketForwardRes);
        responsePacketMap.set('GETTRAILER', packet_get_trailer_1.PacketGetTrailerRes);
        responsePacketMap.set('SHIP', packet_ship_1.PacketShipRes);
        responsePacketMap.set('POST', packet_post_1.PacketPostRes);
        responsePacketMap.set('MSHIP', packet_multi_ship_1.PacketMultiShipRes);
        responsePacketMap.set('MPOST', packet_multi_post_1.PacketMultiPostRes);
        responsePacketMap.set('MINI', packet_mini_1.PacketMiniRes);
        responsePacketMap.set('DOWN', packet_down_1.PacketDownRes);
        responsePacketMap.set('RELAYEVENT', packet_relay_event_1.PacketRelayEventRes);
        responsePacketMap.set('COMPLETE', packet_complete_1.PacketCompleteRes);
        responsePacketMap.set('NOTIREAD', packet_noti_read_1.PacketMessageNotiReadRes);
        responsePacketMap.set('DECUNREAD', packet_message_read_1.PacketMessageReadRes);
        responsePacketMap.set('MEMBER', packet_chat_member_1.PacketChatMemberRes);
        responsePacketMap.set('CHATINFO', packet_channel_info_1.PacketChannelInfoRes);
        responsePacketMap.set('ADDMEM', packet_add_member_1.PacketAddMemberRes);
        responsePacketMap.set('UPDATECHAT', packet_update_channel_1.PacketUpdateChannelRes);
        responsePacketMap.set('GETMETA', packet_get_meta_1.PacketGetMetaRes);
        responsePacketMap.set('GETMCMETA', packet_get_client_meta_1.PacketGetClientMetaRes);
        responsePacketMap.set('GETMETAS', packet_get_meta_1.PacketGetMetaListRes);
        responsePacketMap.set('SETMETA', packet_set_meta_1.PacketSetMetaRes);
        responsePacketMap.set('SETMCMETA', packet_set_client_meta_1.PacketSetClientMetaRes);
        responsePacketMap.set('CHGMETA', packet_meta_change_1.PacketMetaChangeRes);
        responsePacketMap.set('GETMEM', packet_get_member_1.PacketGetMemberRes);
        responsePacketMap.set('MEMBER', packet_member_1.PacketMemberRes);
        responsePacketMap.set('GETMOMETA', packet_get_channel_board_meta_1.PacketGetChannelBoardMetaRes);
        responsePacketMap.set('JOININFO', packet_join_info_1.PacketJoinInfoRes);
        responsePacketMap.set('KICKMEM', packet_kick_member_1.PacketKickMemberRes);
        responsePacketMap.set('CREATE', packet_create_channel_1.PacketCreateChannelRes);
        responsePacketMap.set('NEWMEM', packet_new_member_1.PacketNewMemberRes);
        responsePacketMap.set('LEFT', packet_leave_1.PacketLeftRes);
        responsePacketMap.set('LEAVE', packet_leave_1.PacketLeaveRes);
        responsePacketMap.set('KICKLEAVE', packet_kick_leave_1.PacketKickLeaveRes);
        responsePacketMap.set('SYNCJOIN', packet_sync_join_channel_1.PacketSyncJoinChannelRes);
        responsePacketMap.set('SYNCLINK', packet_sync_link_1.PacketSyncLinkRes);
        responsePacketMap.set('KLSYNC', packet_kick_list_sync_1.PacketKickListSyncRes);
        responsePacketMap.set('KLDELITEM', packet_kick_list_del_item_1.PacketKickListDelItemRes);
        responsePacketMap.set('INFOLINK', packet_info_link_1.PacketInfoLinkRes);
        responsePacketMap.set('DELETELINK', packet_delete_link_1.PacketDeleteLinkRes);
        responsePacketMap.set('LNKDELETED', packet_link_deleted_1.PacketLinkDeletedRes);
        responsePacketMap.set('REWRITE', packet_rewrite_1.PacketRewriteRes);
        responsePacketMap.set('SYNCREWR', packet_sync_rewrite_1.PacketSyncRewriteRes);
        responsePacketMap.set('SETMEMTYPE', packet_set_mem_type_1.PacketSetMemTypeRes);
        responsePacketMap.set('LINKKICKED', packet_link_kicked_1.PacketLinkKickedRes);
        responsePacketMap.set('JOINLINK', packet_join_link_1.PacketJoinLinkRes);
        responsePacketMap.set('CHECKJOIN', packet_check_join_1.PacketCheckJoinRes);
        responsePacketMap.set('UPLINKPROF', packet_update_link_profile_1.PacketUpdateLinkProfileRes);
        responsePacketMap.set('SYNCLINKPF', packet_sync_profile_1.PacketSyncProfileRes);
        responsePacketMap.set('CHATONROOM', packet_chat_on_room_1.PacketChatOnRoomRes);
        responsePacketMap.set('REACTCNT', packet_reaction_count_1.PacketReactionCountRes);
        responsePacketMap.set('REACT', packet_react_1.PacketReactRes);
        responsePacketMap.set('SYNCMEMT', packet_sync_member_type_1.PacketSyncMemberTypeRes);
        responsePacketMap.set('INVOICE', packet_invoice_1.PacketInvoiceRes);
        responsePacketMap.set('DELETEMSG', packet_delete_chat_1.PacketDeleteChatRes);
        responsePacketMap.set('SYNCDLMSG', packet_sync_delete_message_1.PacketSyncDeleteMessageRes);
        responsePacketMap.set('SYNCLINKCR', packet_sync_join_openchat_1.PacketSyncJoinOpenchatRes);
        responsePacketMap.set('SYNCMSG', packet_sync_message_1.PacketSyncMessageRes);
        responsePacketMap.set('DELMEM', packet_delmem_1.PacketDeleteMemberRes);
        responsePacketMap.set('PING', packet_ping_1.PacketPingRes);
        responsePacketMap.set('CHANGESVR', packet_change_server_1.PacketChangeServerRes);
        responsePacketMap.set('KICKOUT', packet_kickout_1.PacketKickoutRes);
        responsePacketMap.set('CREATELINK', packet_create_open_link_1.PacketCreateOpenLinkRes);
        responsePacketMap.set('UPDATELINK', packet_update_link_1.PacketUpdateOpenLinkRes);
    }
    function hasReqPacket(name) {
        return requestPacketMap && requestPacketMap.has(name);
    }
    LocoPacketList.hasReqPacket = hasReqPacket;
    function hasResPacket(name) {
        return responsePacketMap && responsePacketMap.has(name);
    }
    LocoPacketList.hasResPacket = hasResPacket;
    function hasReqBodyType(type) {
        return defaultBodyReqPacketMap && defaultBodyReqPacketMap.has(type);
    }
    LocoPacketList.hasReqBodyType = hasReqBodyType;
    function hasResBodyType(type) {
        return defaultBodyResPacketMap && defaultBodyResPacketMap.has(type);
    }
    LocoPacketList.hasResBodyType = hasResBodyType;
    function getReqPacketByName(name) {
        if (!LocoPacketList.hasReqPacket(name)) {
            throw new Error(`${name} is not valid loco request packet`);
        }
        return new (requestPacketMap.get(name))();
    }
    LocoPacketList.getReqPacketByName = getReqPacketByName;
    function getResPacketByName(name, status) {
        if (!LocoPacketList.hasResPacket(name)) {
            throw new Error(`${name} is not valid loco response packet`);
        }
        return new (responsePacketMap.get(name))(status);
    }
    LocoPacketList.getResPacketByName = getResPacketByName;
    function getDefaultReqPacket(bodyType, packetName) {
        if (!LocoPacketList.hasReqBodyType(bodyType)) {
            throw new Error(`${bodyType} is not valid loco packet type`);
        }
        return new (defaultBodyReqPacketMap.get(bodyType))(packetName);
    }
    LocoPacketList.getDefaultReqPacket = getDefaultReqPacket;
    function getDefaultResPacket(bodyType, packetName, status) {
        if (!LocoPacketList.hasResBodyType(bodyType)) {
            throw new Error(`${bodyType} is not valid loco packet type`);
        }
        return new (defaultBodyResPacketMap.get(bodyType))(status, packetName);
    }
    LocoPacketList.getDefaultResPacket = getDefaultResPacket;
    initReqMap();
    initResMap();
})(LocoPacketList = exports.LocoPacketList || (exports.LocoPacketList = {}));
//# sourceMappingURL=loco-packet-list.js.map