"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketCreateOpenLinkRes = exports.PacketCreateOpenLinkReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const bson_1 = require("bson");
const open_link_type_1 = require("../talk/open/open-link-type");
const channel_info_struct_1 = require("../talk/struct/channel-info-struct");
const json_proxy_mapper_1 = require("json-proxy-mapper");
const open_link_struct_1 = require("../talk/struct/open/open-link-struct");
class PacketCreateOpenLinkReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(Name = '', LinkImagePath = '', LinkType = open_link_type_1.OpenLinkType.PROFILE, Description = '', ProfileContent = null, AllowAnonProfile = true, CanSearchLink = true, CreatedTime = bson_1.Long.ZERO, Activated = true, ChannelLimit = 0, ProfileType = open_link_type_1.OpenProfileType.MAIN, Nickname = '', ProfilePath = '', ProfileLinkId = bson_1.Long.ZERO, UserLimit = 0) {
        super();
        this.Name = Name;
        this.LinkImagePath = LinkImagePath;
        this.LinkType = LinkType;
        this.Description = Description;
        this.ProfileContent = ProfileContent;
        this.AllowAnonProfile = AllowAnonProfile;
        this.CanSearchLink = CanSearchLink;
        this.CreatedTime = CreatedTime;
        this.Activated = Activated;
        this.ChannelLimit = ChannelLimit;
        this.ProfileType = ProfileType;
        this.Nickname = Nickname;
        this.ProfilePath = ProfilePath;
        this.ProfileLinkId = ProfileLinkId;
        this.UserLimit = UserLimit;
    }
    get PacketName() {
        return 'CREATELINK';
    }
    toBodyJson() {
        const obj = {
            'ln': this.Name,
            'lip': this.LinkImagePath,
            'lt': this.LinkType,
            'aptp': this.AllowAnonProfile,
            'sc': this.CanSearchLink,
            'ri': this.CreatedTime,
            'pa': this.Activated,
        };
        if (this.LinkType === open_link_type_1.OpenLinkType.PROFILE)
            obj['dcl'] = this.ChannelLimit;
        else if (this.LinkType === open_link_type_1.OpenLinkType.CHANNEL)
            obj['ml'] = this.UserLimit;
        obj['ptp'] = this.ProfileType;
        switch (this.ProfileType) {
            case open_link_type_1.OpenProfileType.KAKAO_ANON:
                obj['nn'] = this.Nickname;
                obj['pp'] = this.ProfilePath;
                break;
            case open_link_type_1.OpenProfileType.OPEN_PROFILE:
                obj['pli'] = this.ProfileLinkId;
                break;
            default: break;
        }
        obj['desc'] = this.Description;
        if (this.ProfileContent)
            obj['pfc'] = this.ProfileContent;
        return obj;
    }
}
exports.PacketCreateOpenLinkReq = PacketCreateOpenLinkReq;
class PacketCreateOpenLinkRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, OpenLink, ChatInfo) {
        super(status);
        this.OpenLink = OpenLink;
        this.ChatInfo = ChatInfo;
    }
    get PacketName() {
        return 'CREATELINK';
    }
    readBodyJson(rawData) {
        if (rawData['ol'])
            this.OpenLink = json_proxy_mapper_1.Serializer.deserialize(rawData['ol'], open_link_struct_1.OpenLinkStruct.MAPPER);
        if (rawData['chatRoom'])
            this.ChatInfo = json_proxy_mapper_1.Serializer.deserialize(rawData['chatRoom'], channel_info_struct_1.ChannelInfoStruct.MAPPER);
    }
}
exports.PacketCreateOpenLinkRes = PacketCreateOpenLinkRes;
//# sourceMappingURL=packet-create-open-link.js.map