"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketSetClientMetaRes = exports.PacketSetClientMetaReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const channel_meta_struct_1 = require("../talk/struct/channel-meta-struct");
const bson_1 = require("bson");
class PacketSetClientMetaReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelId = bson_1.Long.ZERO, Type = channel_meta_struct_1.ChannelClientMetaType.UNDEFINED, Content = '') {
        super();
        this.ChannelId = ChannelId;
        this.Type = Type;
        this.Content = Content;
    }
    get PacketName() {
        return 'SETMCMETA';
    }
    toBodyJson() {
        return {
            'chatId': this.ChannelId,
            'type': this.Type,
            'content': this.Content
        };
    }
}
exports.PacketSetClientMetaReq = PacketSetClientMetaReq;
class PacketSetClientMetaRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, Type = channel_meta_struct_1.ChannelClientMetaType.UNDEFINED, Revision = 0, ImageURL, FullImageURL, Content) {
        super(status);
        this.Type = Type;
        this.Revision = Revision;
        this.ImageURL = ImageURL;
        this.FullImageURL = FullImageURL;
        this.Content = Content;
    }
    get PacketName() {
        return 'SETMCMETA';
    }
    readBodyJson(rawData) {
        this.Type = rawData['type'];
        this.Revision = rawData['revision'];
        if (rawData['imageUrl'])
            this.ImageURL = rawData['imageUrl'];
        if (rawData['fullImageUrl'])
            this.FullImageURL = rawData['fullImageUrl'];
        if (rawData['content'])
            this.Content = rawData['content'];
    }
}
exports.PacketSetClientMetaRes = PacketSetClientMetaRes;
//# sourceMappingURL=packet-set-client-meta.js.map