"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketChatOnRoomRes = exports.PacketChatOnRoomReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const bson_1 = require("bson");
const member_struct_1 = require("../talk/struct/member-struct");
const channel_type_1 = require("../talk/channel/channel-type");
const json_util_1 = require("../util/json-util");
const open_link_struct_1 = require("../talk/struct/open/open-link-struct");
const json_proxy_mapper_1 = require("json-proxy-mapper");
class PacketChatOnRoomReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelId = bson_1.Long.ZERO, Token = bson_1.Long.ZERO, OpenToken = -1) {
        super();
        this.ChannelId = ChannelId;
        this.Token = Token;
        this.OpenToken = OpenToken;
    }
    get PacketName() {
        return 'CHATONROOM';
    }
    toBodyJson() {
        let obj = {
            'chatId': this.ChannelId,
            'token': this.Token
        };
        if (this.OpenToken !== -1)
            obj['opt'] = this.OpenToken;
        return obj;
    }
}
exports.PacketChatOnRoomReq = PacketChatOnRoomReq;
class PacketChatOnRoomRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, ChannelId = bson_1.Long.ZERO, MemberList, MemberIdList, Type = channel_type_1.ChannelType.UNKNOWN, WatermarkUserIdList = [], WatermarkList = [], OpenChatToken = 0, ClientOpenProfile) {
        super(status);
        this.ChannelId = ChannelId;
        this.MemberList = MemberList;
        this.MemberIdList = MemberIdList;
        this.Type = Type;
        this.WatermarkUserIdList = WatermarkUserIdList;
        this.WatermarkList = WatermarkList;
        this.OpenChatToken = OpenChatToken;
        this.ClientOpenProfile = ClientOpenProfile;
    }
    get PacketName() {
        return 'CHATONROOM';
    }
    readBodyJson(rawData) {
        this.ChannelId = json_util_1.JsonUtil.readLong(rawData['c']);
        this.Type = rawData['t'];
        if (rawData['w'])
            this.WatermarkList = rawData['w'];
        if (rawData['a'])
            this.WatermarkUserIdList = rawData['a'];
        this.MemberList = [];
        if (rawData['otk'])
            this.OpenChatToken = rawData['otk'];
        if (rawData['m']) {
            for (let rawMem of rawData['m']) {
                if (rawMem[open_link_struct_1.OpenMemberStruct.Mappings.openToken])
                    this.MemberList.push(json_proxy_mapper_1.Serializer.deserialize(rawMem, open_link_struct_1.OpenMemberStruct.MAPPER));
                else
                    this.MemberList.push(json_proxy_mapper_1.Serializer.deserialize(rawMem, member_struct_1.MemberStruct.MAPPER));
            }
        }
        if (rawData['mi']) {
            this.MemberIdList = rawData['mi'];
        }
        if (rawData['olu'])
            this.ClientOpenProfile = json_proxy_mapper_1.Serializer.deserialize(rawData['olu'], open_link_struct_1.OpenLinkMemberStruct.MAPPER);
    }
}
exports.PacketChatOnRoomRes = PacketChatOnRoomRes;
//# sourceMappingURL=packet-chat-on-room.js.map