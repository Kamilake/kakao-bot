"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketUpdateOpenLinkRes = exports.PacketUpdateOpenLinkReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const bson_1 = require("bson");
const open_link_struct_1 = require("../talk/struct/open/open-link-struct");
const json_proxy_mapper_1 = require("json-proxy-mapper");
class PacketUpdateOpenLinkReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(LinkId = bson_1.Long.ZERO, LinkName = '', LinkImagePath, UserLimit, ChannelLimit, Passcode = '', Description = '', CanSearchLink = false, Activated = false, UNKNOWN2 = false) {
        super();
        this.LinkId = LinkId;
        this.LinkName = LinkName;
        this.LinkImagePath = LinkImagePath;
        this.UserLimit = UserLimit;
        this.ChannelLimit = ChannelLimit;
        this.Passcode = Passcode;
        this.Description = Description;
        this.CanSearchLink = CanSearchLink;
        this.Activated = Activated;
        this.UNKNOWN2 = UNKNOWN2;
    }
    get PacketName() {
        return 'UPDATELINK';
    }
    toBodyJson() {
        let obj = {
            'li': this.LinkId,
            'ln': this.LinkName,
            'ml': this.UserLimit,
            'ac': this.Activated,
            'pa': this.UNKNOWN2,
            'pc': this.Passcode,
            'desc': this.Description,
            'sc': this.CanSearchLink,
        };
        if (typeof (this.LinkImagePath) === 'string')
            obj['lip'] = this.LinkImagePath;
        if (typeof (this.ChannelLimit) === 'number')
            obj['dcl'] = this.ChannelLimit;
        if (typeof (this.UserLimit) === 'number')
            obj['ml'] = this.UserLimit;
        return obj;
    }
}
exports.PacketUpdateOpenLinkReq = PacketUpdateOpenLinkReq;
class PacketUpdateOpenLinkRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, OpenLink) {
        super(status);
        this.OpenLink = OpenLink;
    }
    get PacketName() {
        return 'UPDATELINK';
    }
    readBodyJson(rawData) {
        if (rawData['ol'])
            this.OpenLink = json_proxy_mapper_1.Serializer.deserialize(rawData, open_link_struct_1.OpenLinkStruct.MAPPER);
    }
}
exports.PacketUpdateOpenLinkRes = PacketUpdateOpenLinkRes;
//# sourceMappingURL=packet-update-link.js.map