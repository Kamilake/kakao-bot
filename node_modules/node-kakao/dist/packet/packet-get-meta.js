"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketGetMetaListRes = exports.PacketGetMetaListReq = exports.PacketGetMetaRes = exports.PacketGetMetaReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const __1 = require("..");
const json_util_1 = require("../util/json-util");
const channel_meta_set_struct_1 = require("../talk/struct/channel-meta-set-struct");
const json_proxy_mapper_1 = require("json-proxy-mapper");
class PacketGetMetaReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelId = __1.Long.ZERO, MetaTypeList = []) {
        super();
        this.ChannelId = ChannelId;
        this.MetaTypeList = MetaTypeList;
    }
    get PacketName() {
        return 'GETMETA';
    }
    toBodyJson() {
        return {
            'chatId': this.ChannelId,
            'types': this.MetaTypeList
        };
    }
}
exports.PacketGetMetaReq = PacketGetMetaReq;
class PacketGetMetaRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, ChannelId = __1.Long.ZERO, MetaList = []) {
        super(status);
        this.ChannelId = ChannelId;
        this.MetaList = MetaList;
    }
    get PacketName() {
        return 'GETMETA';
    }
    readBodyJson(rawJson) {
        this.ChannelId = json_util_1.JsonUtil.readLong(rawJson['chatId']);
        this.MetaList = [];
        if (rawJson['metas']) {
            let list = rawJson['metas'];
            for (let rawMeta of list) {
                this.MetaList.push(rawMeta);
            }
        }
    }
}
exports.PacketGetMetaRes = PacketGetMetaRes;
class PacketGetMetaListReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelList = []) {
        super();
        this.ChannelList = ChannelList;
    }
    get PacketName() {
        return 'GETMETAS';
    }
    toBodyJson() {
        return {
            'cs': this.ChannelList
        };
    }
}
exports.PacketGetMetaListReq = PacketGetMetaListReq;
class PacketGetMetaListRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, MetaSetList = []) {
        super(status);
        this.MetaSetList = MetaSetList;
    }
    get PacketName() {
        return 'GETMETAS';
    }
    readBodyJson(rawData) {
        this.MetaSetList = [];
        if (rawData['mss']) {
            for (let rawMetaSet of rawData['mss']) {
                this.MetaSetList.push(json_proxy_mapper_1.Serializer.deserialize(rawMetaSet, channel_meta_set_struct_1.ChannelMetaSetStruct.MAPPER));
            }
        }
    }
}
exports.PacketGetMetaListRes = PacketGetMetaListRes;
//# sourceMappingURL=packet-get-meta.js.map