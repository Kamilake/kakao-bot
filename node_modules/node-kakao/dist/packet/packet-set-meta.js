"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketSetMetaRes = exports.PacketSetMetaReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const bson_1 = require("bson");
const channel_meta_struct_1 = require("../talk/struct/channel-meta-struct");
const json_util_1 = require("../util/json-util");
class PacketSetMetaReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelId = bson_1.Long.ZERO, Type = channel_meta_struct_1.ChannelMetaType.UNDEFINED, Content = '') {
        super();
        this.ChannelId = ChannelId;
        this.Type = Type;
        this.Content = Content;
    }
    get PacketName() {
        return 'SETMETA';
    }
    toBodyJson() {
        return {
            'chatId': this.ChannelId,
            'type': this.Type,
            'content': this.Content
        };
    }
}
exports.PacketSetMetaReq = PacketSetMetaReq;
class PacketSetMetaRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, ChannelId = bson_1.Long.ZERO, Meta) {
        super(status);
        this.ChannelId = ChannelId;
        this.Meta = Meta;
    }
    get PacketName() {
        return 'SETMETA';
    }
    readBodyJson(rawData) {
        this.ChannelId = json_util_1.JsonUtil.readLong(rawData['chatId']);
        if (rawData['meta']) {
            this.Meta = rawData['meta'];
        }
    }
}
exports.PacketSetMetaRes = PacketSetMetaRes;
//# sourceMappingURL=packet-set-meta.js.map