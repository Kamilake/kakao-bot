"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketMultiChatlogRes = exports.PacketMultiChatlogReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const chatlog_struct_1 = require("../talk/struct/chatlog-struct");
const json_proxy_mapper_1 = require("json-proxy-mapper");
class PacketMultiChatlogReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelIdList = [], SinceList = []) {
        super();
        this.ChannelIdList = ChannelIdList;
        this.SinceList = SinceList;
    }
    get PacketName() {
        return 'MCHATLOGS';
    }
    toBodyJson() {
        return {
            'chatIds': this.ChannelIdList,
            'sinces': this.SinceList
        };
    }
}
exports.PacketMultiChatlogReq = PacketMultiChatlogReq;
class PacketMultiChatlogRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, ChatlogList = []) {
        super(status);
        this.ChatlogList = ChatlogList;
    }
    get PacketName() {
        return 'MCHATLOGS';
    }
    readBodyJson(rawData) {
        if (rawData['chatLogs']) {
            this.ChatlogList = [];
            for (let rawChatlog of rawData['chatLogs']) {
                this.ChatlogList.push(json_proxy_mapper_1.Serializer.deserialize(rawChatlog, chatlog_struct_1.ChatlogStruct.MAPPER));
            }
        }
    }
}
exports.PacketMultiChatlogRes = PacketMultiChatlogRes;
//# sourceMappingURL=packet-multi-chatlog.js.map