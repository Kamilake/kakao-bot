"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketShipRes = exports.PacketShipReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const bson_1 = require("bson");
const chat_type_1 = require("../talk/chat/chat-type");
class PacketShipReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelId = bson_1.Long.ZERO, Type = chat_type_1.ChatType.Unknown, Size = bson_1.Long.ZERO, Checksum = '', Ext = '') {
        super();
        this.ChannelId = ChannelId;
        this.Type = Type;
        this.Size = Size;
        this.Checksum = Checksum;
        this.Ext = Ext;
    }
    get PacketName() {
        return 'SHIP';
    }
    toBodyJson() {
        return {
            'c': this.ChannelId,
            't': this.Type,
            's': this.Size,
            'cs': this.Checksum,
            'e': this.Ext
        };
    }
}
exports.PacketShipReq = PacketShipReq;
class PacketShipRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, Key = '', Host = '', Port = 0, VHost = '', VHostV6 = '') {
        super(status);
        this.Key = Key;
        this.Host = Host;
        this.Port = Port;
        this.VHost = VHost;
        this.VHostV6 = VHostV6;
    }
    get PacketName() {
        return 'SHIP';
    }
    readBodyJson(rawData) {
        this.Key = rawData['k'];
        this.Host = rawData['h'];
        this.Port = rawData['p'];
        this.VHost = rawData['vh'];
        this.VHostV6 = rawData['vh6'];
    }
}
exports.PacketShipRes = PacketShipRes;
//# sourceMappingURL=packet-ship.js.map