"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketGetChannelBoardMetaRes = exports.PacketGetChannelBoardMetaReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const __1 = require("..");
const json_util_1 = require("../util/json-util");
const channel_board_meta_struct_1 = require("../talk/struct/channel-board-meta-struct");
const json_proxy_mapper_1 = require("json-proxy-mapper");
class PacketGetChannelBoardMetaReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelId = __1.Long.ZERO, MetaTypeList = []) {
        super();
        this.ChannelId = ChannelId;
        this.MetaTypeList = MetaTypeList;
    }
    get PacketName() {
        return 'GETMOMETA';
    }
    toBodyJson() {
        return {
            'c': this.ChannelId,
            'ts': this.MetaTypeList
        };
    }
}
exports.PacketGetChannelBoardMetaReq = PacketGetChannelBoardMetaReq;
class PacketGetChannelBoardMetaRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, ChannelId = __1.Long.ZERO, MetaList = []) {
        super(status);
        this.ChannelId = ChannelId;
        this.MetaList = MetaList;
    }
    get PacketName() {
        return 'GETMOMETA';
    }
    readBodyJson(rawData) {
        this.ChannelId = json_util_1.JsonUtil.readLong(rawData['c']);
        this.MetaList = [];
        if (rawData['ms']) {
            for (let rawMeta of rawData['ms']) {
                this.MetaList.push(json_proxy_mapper_1.Serializer.deserialize(rawMeta, channel_board_meta_struct_1.ChannelBoardMetaStruct.MAPPER));
            }
        }
    }
}
exports.PacketGetChannelBoardMetaRes = PacketGetChannelBoardMetaRes;
//# sourceMappingURL=packet-get-channel-board-meta.js.map