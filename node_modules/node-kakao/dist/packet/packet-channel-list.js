"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketChannelListRes = exports.PacketChannelListReq = void 0;
const loco_bson_packet_1 = require("./loco-bson-packet");
const bson_1 = require("bson");
const channel_data_struct_1 = require("../talk/struct/channel-data-struct");
const json_proxy_mapper_1 = require("json-proxy-mapper");
class PacketChannelListReq extends loco_bson_packet_1.LocoBsonRequestPacket {
    constructor(ChannelIdList = [], MaxIdList = [], LastTokenId = bson_1.Long.ZERO, LastChatId = bson_1.Long.ZERO) {
        super();
        this.ChannelIdList = ChannelIdList;
        this.MaxIdList = MaxIdList;
        this.LastTokenId = LastTokenId;
        this.LastChatId = LastChatId;
    }
    get PacketName() {
        return 'LCHATLIST';
    }
    toBodyJson() {
        return {
            'chatIds': this.ChannelIdList,
            'maxIds': this.MaxIdList,
            'lastTokenId': this.LastTokenId,
            'lastChatId': this.LastChatId
        };
    }
}
exports.PacketChannelListReq = PacketChannelListReq;
class PacketChannelListRes extends loco_bson_packet_1.LocoBsonResponsePacket {
    constructor(status, ChatDataList = []) {
        super(status);
        this.ChatDataList = ChatDataList;
    }
    get PacketName() {
        return 'LCHATLIST';
    }
    readBodyJson(rawData) {
        this.ChatDataList = [];
        if (rawData['chatDatas']) {
            for (let chatData of rawData['chatDatas']) {
                this.ChatDataList.push(json_proxy_mapper_1.Serializer.deserialize(chatData, channel_data_struct_1.ChannelDataStruct.MAPPER));
            }
        }
    }
}
exports.PacketChannelListRes = PacketChannelListRes;
//# sourceMappingURL=packet-channel-list.js.map