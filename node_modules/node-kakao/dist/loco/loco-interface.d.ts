/// <reference types="node" />
import { LocoResponsePacket, LocoRequestPacket } from "../packet/loco-packet-base";
import { PacketHeader } from "../packet/packet-header-struct";
import { LocoSocket } from "../network/loco-socket";
import { HostData } from "../network/host-data";
import { ClientConfigProvider } from "../config/client-config-provider";
export interface LocoInterface {
    readonly Connected: boolean;
    connect(): Promise<boolean>;
    disconnect(): boolean;
    sendPacket(packet: LocoRequestPacket): Promise<boolean>;
    requestPacketRes<T extends LocoResponsePacket>(packet: LocoRequestPacket): Promise<T>;
    onError(err: Error): void;
}
export interface LocoRequestInterface {
    sendPacket(packet: LocoRequestPacket): Promise<boolean>;
    requestPacketRes<T extends LocoResponsePacket>(packet: LocoRequestPacket): Promise<T>;
}
export interface LocoReceiver {
    responseReceived(header: PacketHeader, data: Buffer): LocoResponsePacket;
    onError(err: Error): void;
    disconnected(): void;
}
export interface LocoListener {
    packetSent(packetId: number, packet: LocoRequestPacket): void;
    packetReceived(packetId: number, packet: LocoResponsePacket, reqPacket?: LocoRequestPacket): void;
    onError(err: Error): void;
    disconnected(): void;
}
export declare abstract class LocoCommandInterface implements LocoInterface, LocoReceiver {
    private listener;
    private configProvider;
    private packetCount;
    private socket;
    private packetMap;
    constructor(hostData: HostData, listener: LocoListener | null, configProvider: ClientConfigProvider);
    get ConfigProvider(): ClientConfigProvider;
    protected abstract createSocket(hostData: HostData): LocoSocket;
    protected get Socket(): LocoSocket;
    get Connected(): boolean;
    connect(): Promise<boolean>;
    disconnect(): boolean;
    get CurrentPacketId(): number;
    set CurrentPacketId(value: number);
    getNextPacketId(): number;
    sendPacket(packet: LocoRequestPacket): Promise<boolean>;
    requestPacketRes<T extends LocoResponsePacket>(packet: LocoRequestPacket): Promise<T>;
    responseReceived(header: PacketHeader, data: Buffer): LocoResponsePacket;
    protected structToPacket<T extends LocoResponsePacket>(header: PacketHeader, bodyBuffer: Buffer, offset?: number): T;
    onError(err: Error): void;
    disconnected(): void;
}
export declare class LocoTLSCommandInterface extends LocoCommandInterface {
    protected createSocket(hostData: HostData): LocoSocket;
}
export declare class LocoSecureCommandInterface extends LocoCommandInterface {
    protected createSocket(hostData: HostData): LocoSocket;
}
