import { Long } from "bson";
export interface Store<K, V> {
    has(key: K): boolean;
    get(key: K): V;
}
export interface AsyncStore<K, V> extends Store<K, Promise<V>> {
}
export interface NullableStore<K, V> extends Store<K, V | null> {
}
export interface NullableAsyncStore<K, V> extends AsyncStore<K, V | null> {
}
export interface NullableIdStore<V> extends NullableStore<Long, V> {
}
export interface NullableAsyncIdStore<V> extends NullableAsyncStore<Long, V> {
}
export declare class IdStore<V> implements NullableIdStore<V> {
    private map;
    constructor();
    has(key: Long): boolean;
    get(key: Long): V | null;
    protected set(key: Long, value: V): Map<string, V>;
    protected delete(key: Long): boolean;
    protected clear(): void;
    protected values(): IterableIterator<V>;
    protected convertKey(key: Long): string;
}
export declare class AsyncIdStore<V> implements NullableAsyncIdStore<V> {
    private map;
    constructor();
    has(key: Long): boolean;
    get(key: Long): Promise<V | null>;
    protected getFromMap(key: Long): V | undefined;
    protected set(key: Long, value: V): Map<string, V>;
    protected delete(key: Long): boolean;
    protected clear(): void;
    protected values(): IterableIterator<V>;
    protected convertKey(key: Long): string;
}
export declare abstract class IdInstanceStore<V> extends IdStore<V> {
    protected abstract createInstanceFor(key: Long): V;
    get(key: Long): V | null;
}
export declare abstract class AsyncIdInstanceStore<V> extends AsyncIdStore<V> {
    protected abstract createInstanceFor(key: Long): Promise<V>;
    get(key: Long): Promise<V | null>;
}
