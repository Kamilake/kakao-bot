"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocoPacketResolver = void 0;
const stream_1 = require("stream");
const chunked_buffer_list_1 = require("../chunk/chunked-buffer-list");
class LocoPacketResolver extends stream_1.Writable {
    constructor(socket) {
        super();
        this.socket = socket;
        this.chunkList = new chunked_buffer_list_1.ChunkedBufferList();
        this.currentHeader = null;
    }
    get Socket() {
        return this.socket;
    }
    _destroy(error, callback) {
        this.currentHeader = null;
        this.chunkList.clear();
        super._destroy(error, callback);
    }
    _write(chunk, encoding, callback) {
        this.chunkList.append(chunk);
        let buf = null;
        if (!this.currentHeader && this.chunkList.TotalByteLength > LocoPacketResolver.HEADER_SIZE) {
            buf = this.chunkList.toBuffer();
            let headerBuffer = buf.slice(0, LocoPacketResolver.HEADER_SIZE);
            this.currentHeader = this.structHeader(headerBuffer);
        }
        if (this.currentHeader) {
            let currentPacketSize = LocoPacketResolver.HEADER_SIZE + this.currentHeader.bodySize;
            if (this.chunkList.TotalByteLength >= currentPacketSize) {
                if (!buf)
                    buf = this.chunkList.toBuffer();
                let newBuf = Buffer.allocUnsafe(buf.byteLength - currentPacketSize);
                buf.copy(newBuf, 0, currentPacketSize);
                let bodyBuffer = buf.slice(LocoPacketResolver.HEADER_SIZE, currentPacketSize);
                this.Socket.dataReceived(this.currentHeader, bodyBuffer);
                this.chunkList.clear();
                this.currentHeader = null;
                this._write(newBuf);
            }
        }
        if (callback)
            callback();
    }
    structHeader(buffer, offset = 0) {
        return {
            packetId: buffer.readInt32LE(offset),
            statusCode: buffer.readInt16LE(offset + 4),
            packetName: buffer.toString('utf8', offset + 6, offset + 17).replace(/\0/g, ''),
            bodyType: buffer.readInt8(offset + 17),
            bodySize: buffer.readInt32LE(offset + 18)
        };
    }
}
exports.LocoPacketResolver = LocoPacketResolver;
LocoPacketResolver.HEADER_SIZE = 22;
//# sourceMappingURL=loco-packet-resolver.js.map