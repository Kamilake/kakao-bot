"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocoEncryptedTransformer = void 0;
const stream_1 = require("stream");
const chunked_buffer_list_1 = require("../chunk/chunked-buffer-list");
class LocoEncryptedTransformer extends stream_1.Transform {
    constructor(socket) {
        super();
        this.socket = socket;
        this.currentEncryptedHeader = null;
        this.chunkList = new chunked_buffer_list_1.ChunkedBufferList();
    }
    get Socket() {
        return this.socket;
    }
    get Crypto() {
        return this.socket.Crypto;
    }
    _destroy(error, callback) {
        this.currentEncryptedHeader = null;
        this.chunkList.clear();
        super._destroy(error, callback);
    }
    _transform(chunk, encoding, callback) {
        this.chunkList.append(chunk);
        let buf = null;
        if (!this.currentEncryptedHeader && this.chunkList.TotalByteLength > LocoEncryptedTransformer.ENCRYPTED_HEADER_SIZE) {
            buf = this.chunkList.toBuffer();
            this.currentEncryptedHeader = { encryptedSize: buf.readInt32LE(0) };
        }
        if (this.currentEncryptedHeader) {
            let encryptedPacketSize = LocoEncryptedTransformer.ENCRYPTED_HEADER_SIZE + this.currentEncryptedHeader.encryptedSize;
            if (this.chunkList.TotalByteLength >= encryptedPacketSize) {
                if (!buf)
                    buf = this.chunkList.toBuffer();
                let iv = buf.slice(LocoEncryptedTransformer.ENCRYPTED_HEADER_SIZE, LocoEncryptedTransformer.ENCRYPTED_HEADER_SIZE + LocoEncryptedTransformer.IV_SIZE);
                let encryptedBodyBuffer = buf.slice(LocoEncryptedTransformer.ENCRYPTED_HEADER_SIZE + LocoEncryptedTransformer.IV_SIZE, encryptedPacketSize);
                let decrypted = this.Crypto.toDecryptedPacketBuffer(encryptedBodyBuffer, iv);
                let newBuf = Buffer.allocUnsafe(buf.byteLength - encryptedPacketSize);
                buf.copy(newBuf, 0, encryptedPacketSize);
                this.chunkList.clear();
                this.currentEncryptedHeader = null;
                this.push(decrypted);
                this._transform(newBuf);
            }
        }
        if (callback)
            callback();
    }
}
exports.LocoEncryptedTransformer = LocoEncryptedTransformer;
LocoEncryptedTransformer.ENCRYPTED_HEADER_SIZE = 4;
LocoEncryptedTransformer.IV_SIZE = 16;
//# sourceMappingURL=loco-encrypted-transformer.js.map