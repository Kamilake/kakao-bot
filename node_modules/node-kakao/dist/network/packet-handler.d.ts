/// <reference types="node" />
import { EventEmitter } from "events";
import { PacketMessageRes } from "../packet/packet-message";
import { PacketMessageReadRes } from "../packet/packet-message-read";
import { PacketNewMemberRes } from "../packet/packet-new-member";
import { PacketSyncDeleteMessageRes } from "../packet/packet-sync-delete-message";
import { PacketLeftRes, PacketLeaveRes, PacketLeaveReq } from "../packet/packet-leave";
import { PacketLinkKickedRes } from "../packet/packet-link-kicked";
import { PacketJoinLinkRes } from "../packet/packet-join-link";
import { PacketSyncJoinOpenchatRes } from "../packet/packet-sync-join-openchat";
import { PacketSyncMemberTypeRes } from "../packet/packet-sync-member-type";
import { PacketSyncProfileRes } from "../packet/packet-sync-profile";
import { PacketKickMemberRes } from "../packet/packet-kick-member";
import { PacketDeleteMemberRes } from "../packet/packet-delmem";
import { PacketKickoutRes } from "../packet/packet-kickout";
import { LocoPacketHandler } from "../loco/loco-packet-handler";
import { NetworkManager } from "./network-manager";
import { LocoRequestPacket, LocoResponsePacket } from "../packet/loco-packet-base";
import { Long } from "bson";
import { PacketMetaChangeRes } from "../packet/packet-meta-change";
import { PacketSetMetaRes } from "../packet/packet-set-meta";
import { PacketChangeServerRes } from "../packet/packet-change-server";
import { PacketLoginRes } from "../packet/packet-login";
import { PacketUpdateLinkProfileReq, PacketUpdateLinkProfileRes } from "../packet/packet-update-link-profile";
import { ManagedChatChannel, ManagedOpenChatChannel } from "../talk/managed/managed-chat-channel";
import { PacketSyncRewriteRes } from "../packet/packet-sync-rewrite";
import { PacketRewriteRes, PacketRewriteReq } from "../packet/packet-rewrite";
import { PacketLinkDeletedRes } from "../packet/packet-link-deleted";
import { PacketSetMemTypeRes } from "../packet/packet-set-mem-type";
import { PacketRelayEventRes } from "../packet/packet-relay-event";
import { PacketKickLeaveRes, PacketKickLeaveReq } from "../packet/packet-kick-leave";
export declare class TalkPacketHandler extends EventEmitter implements LocoPacketHandler {
    private networkManager;
    private kickReason;
    constructor(networkManager: NetworkManager);
    get NetworkManager(): NetworkManager;
    get Client(): import("..").LocoClient;
    get ChatManager(): import("..").ChatManager;
    get ChannelManager(): import("..").ChannelManager;
    get UserManager(): import("..").UserManager;
    onRequest(packetId: number, packet: LocoRequestPacket): void;
    onResponse(packetId: number, packet: LocoResponsePacket, reqPacket?: LocoRequestPacket): void;
    onDisconnected(): void;
    getManagedChannel(id: Long): ManagedChatChannel | ManagedOpenChatChannel | null;
    onLogin(packet: PacketLoginRes): Promise<void>;
    onMessagePacket(packet: PacketMessageRes): Promise<void>;
    onMessageRead(packet: PacketMessageReadRes): void;
    onMetaChange(packet: PacketMetaChangeRes | PacketSetMetaRes): void;
    onNewMember(packet: PacketNewMemberRes): Promise<void>;
    syncMessageDelete(packet: PacketSyncDeleteMessageRes): void;
    onChannelLeft(packet: PacketLeftRes): void;
    onChannelLeave(packet: PacketLeaveRes | PacketKickLeaveRes, reqPacket?: PacketLeaveReq | PacketKickLeaveReq): void;
    onLinkKicked(packet: PacketLinkKickedRes): void;
    onLinkDeleted(packet: PacketLinkDeletedRes): void;
    onOpenChannelJoin(packet: PacketJoinLinkRes): void;
    onRewrite(packet: PacketRewriteRes, reqPacket?: PacketRewriteReq): void;
    syncOpenChannelJoin(packet: PacketSyncJoinOpenchatRes): Promise<void>;
    onMemberTypeChange(packet: PacketSetMemTypeRes | PacketSyncMemberTypeRes): Promise<void>;
    syncClientProfileUpdate(packet: PacketUpdateLinkProfileRes, reqPacket: PacketUpdateLinkProfileReq): void;
    syncProfileUpdate(packet: PacketSyncProfileRes): void;
    syncRewrite(packet: PacketSyncRewriteRes): void;
    onOpenChannelKick(packet: PacketKickMemberRes): void;
    onMemberDelete(packet: PacketDeleteMemberRes): void;
    onRelayEvent(packet: PacketRelayEventRes): void;
    onSwitchServerReq(packet: PacketChangeServerRes): void;
    onLocoKicked(packet: PacketKickoutRes): void;
}
