/// <reference types="node" />
import * as net from "net";
import { PacketHeader } from "../packet/packet-header-struct";
import { LocoReceiver } from "../loco/loco-interface";
export interface LocoSocket {
    readonly Host: string;
    readonly Port: number;
    readonly Connected: boolean;
    readonly KeepAlive: boolean;
    connect(): Promise<boolean>;
    disconnect(): boolean;
    sendPacket(header: PacketHeader, data: Buffer): Promise<boolean>;
    dataReceived(header: PacketHeader, data: Buffer): void;
}
export declare abstract class LocoBasicSocket implements LocoSocket {
    private receiver;
    private host;
    private port;
    private keepAlive;
    private socket;
    private connected;
    constructor(receiver: LocoReceiver, host: string, port: number, keepAlive?: boolean);
    protected abstract createSocketConnection(host: string, port: number, callback: () => void): net.Socket;
    get Host(): string;
    get Port(): number;
    get Socket(): net.Socket | null;
    get Connected(): boolean;
    get KeepAlive(): boolean;
    set KeepAlive(flag: boolean);
    connect(): Promise<boolean>;
    protected pipeTranformation(socket: net.Socket): void;
    protected abstract onConnect(): void;
    protected abstract onConnected(): void;
    disconnect(): boolean;
    protected onDisconnect(): void;
    protected onDisconnected(): void;
    protected connectionError(e: any): void;
    protected connectionEnded(buffer: Buffer): void;
    dataReceived(header: PacketHeader, data: Buffer): void;
    protected transformBuffer(data: Buffer): Buffer;
    sendPacket(header: PacketHeader, bodyBuffer: Buffer): Promise<boolean>;
    sendBuffer(buffer: Buffer): Promise<boolean>;
    protected toPacketBuffer(header: PacketHeader, bodyBuffer: Buffer, buffer?: Buffer, offset?: number): Buffer;
    protected createHeaderBuffer(header: PacketHeader): Buffer;
    protected abstract onEnd(buffer: Buffer): void;
    protected onError(err: Error): void;
}
