import { LocoPacketHandler } from "../loco/loco-packet-handler";
import { TalkPacketHandler } from "./packet-handler";
import { LocoCommandInterface, LocoListener, LocoInterface, LocoSecureCommandInterface, LocoReceiver } from "../loco/loco-interface";
import { LocoRequestPacket, LocoResponsePacket } from "../packet/loco-packet-base";
import { PacketLoginRes } from "../packet/packet-login";
import { LocoClient } from "../client";
import { PacketBuyCallServerRes } from "../packet/checkin/packet-buy-call-server";
import { Long } from "bson";
import { HostData } from "./host-data";
import { MediaUploadInterface } from "../talk/media/media-upload-interface";
import { MediaDownloadInterface } from "../talk/media/media-download-interface";
import { ClientConfigProvider } from "../config/client-config-provider";
export declare class NetworkManager implements LocoListener, LocoInterface {
    private client;
    private configProvider;
    static readonly PING_INTERVAL = 600000;
    private cachedBookingData;
    private cachedCheckinData;
    private lastCheckinReq;
    private mainInterface;
    private handler;
    constructor(client: LocoClient, configProvider: ClientConfigProvider);
    get Client(): LocoClient;
    get Connected(): boolean;
    get Logon(): boolean;
    get Handler(): LocoPacketHandler;
    set Handler(handler: LocoPacketHandler);
    connect(): Promise<boolean>;
    disconnect(): boolean;
    sendPacket(packet: LocoRequestPacket): Promise<boolean>;
    requestPacketRes<T extends LocoResponsePacket>(packet: LocoRequestPacket): Promise<T>;
    protected createBookingInterface(hostInfo: HostData, listener?: this, configProvider?: ClientConfigProvider): LocoCommandInterface;
    protected createCheckinInterface(hostInfo: HostData, listener?: this, configProvider?: ClientConfigProvider): LocoCommandInterface;
    protected createMainInterface(hostInfo: HostData, listener?: this, configProvider?: ClientConfigProvider): LocoMainInterface;
    createUploadInterface(hostInfo: HostData, listener?: this, configProvider?: ClientConfigProvider): MediaUploadInterface;
    createDownloadInterface(hostInfo: HostData, listener?: this, configProvider?: ClientConfigProvider): MediaDownloadInterface;
    requestCheckinData(userId: Long): Promise<CheckinData>;
    requestCallServerData(userId: Long): Promise<PacketBuyCallServerRes>;
    requestBookingData(): Promise<BookingData>;
    requestBookingRes<T extends LocoResponsePacket>(packet: LocoRequestPacket): Promise<T>;
    requestCheckinRes<T extends LocoResponsePacket>(packet: LocoRequestPacket): Promise<T>;
    getBookingData(forceRecache?: boolean): Promise<BookingData>;
    getCheckinData(userId: Long, forceRecache?: boolean): Promise<CheckinData>;
    protected createPacketHandler(): TalkPacketHandler;
    locoLogin(deviceUUID: string, userId: Long, accessToken: string): Promise<PacketLoginRes>;
    packetSent(packetId: number, packet: LocoRequestPacket): void;
    packetReceived(packetId: number, packet: LocoResponsePacket, reqPacket?: LocoRequestPacket): void;
    onError(err: Error): void;
    disconnected(): void;
}
export declare class BookingData {
    CheckinHost: HostData;
    constructor(CheckinHost: HostData);
}
export declare class CheckinData {
    LocoHost: HostData;
    expireTime: number;
    constructor(LocoHost: HostData, expireTime: number);
}
export interface LocoMainInterface extends LocoInterface, LocoReceiver {
    readonly Logon: boolean;
    login(deviceUUID: string, accessToken: string): Promise<PacketLoginRes>;
}
export declare class MainInterface extends LocoSecureCommandInterface implements LocoMainInterface {
    private locoLogon;
    private pingSchedulerId;
    constructor(hostData: HostData, listener: LocoListener, configProvider: ClientConfigProvider);
    get Logon(): boolean;
    login(deviceUUID: string, accessToken: string): Promise<PacketLoginRes>;
    private schedulePing;
    disconnected(): void;
}
