import { ClientConfigProvider } from "../config/client-config-provider";
import { AccessDataProvider } from "../oauth/access-data-provider";
import { LessSettingsStruct, MoreSettingsStruct } from "../talk/struct/api/account/client-settings-struct";
import { LoginTokenStruct } from "../talk/struct/api/account/login-token-struct";
import { AuthApiStruct } from "../talk/struct/auth/auth-api-struct";
import { LoginAccessDataStruct } from "../talk/struct/auth/login-access-data-struct";
import { AHeaderDecorator } from "./api-header-decorator";
import { RequestHeader, WebApiClient } from "./web-api-client";
export declare type LoginForm = {
    email: string;
    password: string;
    device_uuid: string;
    os_version: string;
    device_name: string;
    permanent?: boolean;
    forced?: boolean;
    autowithlock?: boolean;
    auto_login?: boolean;
    passcode?: string;
};
export declare class AuthClient extends WebApiClient implements AccessDataProvider {
    private name;
    private deviceUUID;
    private currentLogin;
    private accessData;
    private aHeader;
    constructor(name: string, deviceUUID: string, configProvider: ClientConfigProvider);
    get AHeader(): AHeaderDecorator;
    get Scheme(): string;
    get Host(): string;
    get Agent(): string;
    fillHeader(header: RequestHeader): void;
    get Name(): string;
    get DeviceUUID(): string;
    set DeviceUUID(uuid: string);
    get Logon(): boolean;
    requestMoreSettings(since?: number, language?: string): Promise<MoreSettingsStruct>;
    requestLessSettings(since?: number, language?: string): Promise<LessSettingsStruct>;
    updateSettings(settings: Partial<unknown>): Promise<AuthApiStruct>;
    requestWebLoginToken(): Promise<LoginTokenStruct>;
    createSessionURL(token: string, redirectURL: string): string;
    requestSessionURL(redirectURL: string): Promise<string>;
    protected createLoginForm(email: string, password: string, permanent?: boolean, forced?: boolean): LoginForm;
    protected createAutologinForm(email: string, token: string, locked: boolean, permanent?: boolean, forced?: boolean): LoginForm;
    protected createRegisterForm(passcode: string, email: string, password: string, permanent: boolean, forced?: boolean): LoginForm;
    login(email: string, password: string, forced?: boolean): Promise<void>;
    loginToken(email: string, token: string, forced?: boolean, locked?: boolean): Promise<void>;
    protected loginAccessData(accessData: LoginAccessDataStruct): void;
    requestPasscode(email: string, password: string, forced?: boolean): Promise<AuthApiStruct>;
    registerDevice(passcode: string, email: string, password: string, permanent: boolean, forced?: boolean): Promise<AuthApiStruct>;
    relogin(): Promise<void>;
    static getAccountApiPath(agent: string, api: string): string;
    calculateXVCKey(userAgent: string, email: string): string;
    calculateFullXVCKey(userAgent: string, email: string): string;
    generateAutoLoginToken(): string;
    logout(): void;
    getLatestAccessData(): LoginAccessDataStruct;
    fillSessionHeader(header: RequestHeader): void;
}
