"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenChannelBoardClient = exports.ChannelBoardClient = exports.BaseBoardClient = void 0;
const web_api_client_1 = require("./web-api-client");
const channel_post_struct_1 = require("../talk/struct/api/board/channel-post-struct");
const json_util_1 = require("../util/json-util");
class BaseBoardClient extends web_api_client_1.SessionApiClient {
    fillCommentForm(form, content) {
        let contentList = [];
        if (typeof (content) === 'string') {
            contentList.push({ type: 'text', text: content });
        }
        else {
            if (typeof (content.text) === 'string') {
                contentList.push({ type: 'text', text: content.text });
            }
            else if (content.text && content.text instanceof Array) {
                contentList.push(...content.text);
            }
            if (content.emoticon)
                form['sticon'] = json_util_1.JsonUtil.stringifyLoseless(content.emoticon.toJsonAttachment());
        }
        form['content'] = json_util_1.JsonUtil.stringifyLoseless(contentList);
    }
    fillFileMap(form, type, fileMap) {
        form['original_file_names[]'] = Object.keys(fileMap);
        form[`${type.toLowerCase()}_paths[]`] = Object.values(fileMap);
    }
    fillPostForm(form, template) {
        form['object_type'] = template.object_type;
        if (template.content) {
            let contentList = [];
            if (typeof (template.content) === 'string')
                contentList.push({ text: template.content, type: channel_post_struct_1.ChannelPost.ContentType.TEXT });
            else if (template.content instanceof Array)
                contentList.push(...template.content);
            form['content'] = json_util_1.JsonUtil.stringifyLoseless(contentList);
        }
        if (template.object_type === channel_post_struct_1.PostType.POLL && template.poll_content)
            form['poll_content'] = json_util_1.JsonUtil.stringifyLoseless(template.poll_content);
        if (template.object_type === channel_post_struct_1.PostType.IMAGE)
            this.fillFileMap(form, channel_post_struct_1.PostType.IMAGE, template.images);
        else if (template.object_type === channel_post_struct_1.PostType.VIDEO)
            this.fillFileMap(form, channel_post_struct_1.PostType.VIDEO, template.vidoes);
        else if (template.object_type === channel_post_struct_1.PostType.FILE)
            this.fillFileMap(form, channel_post_struct_1.PostType.FILE, template.files);
        else if (template.object_type === channel_post_struct_1.PostType.SCHEDULE)
            form['schedule_content'] = json_util_1.JsonUtil.stringifyLoseless(template.schedule_content);
        if (template.emoticon)
            form['sticon'] = json_util_1.JsonUtil.stringifyLoseless(template.emoticon.toJsonAttachment());
        if (template.scrap)
            form['scrap'] = json_util_1.JsonUtil.stringifyLoseless(template.scrap);
        form['notice'] = template.notice;
    }
}
exports.BaseBoardClient = BaseBoardClient;
class ChannelBoardClient extends BaseBoardClient {
    get Scheme() {
        return 'https';
    }
    get Host() {
        return 'talkmoim-api.kakao.com';
    }
    async requestPostList(channelId) {
        return this.request('GET', `chats/${channelId.toString()}/posts`);
    }
    async getPost(postId) {
        return this.request('GET', `posts/${postId}`);
    }
    async getPostEmotionList(postId) {
        return this.request('GET', `posts/${postId}/emotions`);
    }
    async getPostCommentList(postId) {
        return this.request('GET', `posts/${postId}/comments`);
    }
    async reactToPost(postId) {
        return this.request('POST', `posts/${postId}/emotions`, { emotion: channel_post_struct_1.BoardEmotionType.LIKE });
    }
    async unreactPost(postId, reactionId) {
        return this.request('DELETE', `posts/${postId}/emotions/${reactionId}`);
    }
    async commentToPost(postId, content) {
        let form = {};
        this.fillCommentForm(form, content);
        return this.request('POST', `posts/${postId}/comments`, form);
    }
    async deleteComment(postId, commentId) {
        return this.request('DELETE', `posts/${postId}/comments/${commentId}`);
    }
    async createPost(channelId, template) {
        let form = {};
        this.fillPostForm(form, template);
        return this.request('POST', `chats/${channelId.toString()}/posts`, form);
    }
    async updatePost(postId, template) {
        let form = {};
        this.fillPostForm(form, template);
        return this.request('PUT', `posts/${postId}`, form);
    }
    async deletePost(postId) {
        return this.request('DELETE', `posts/${postId}`);
    }
    async setPostNotice(postId) {
        return this.request('POST', `posts/${postId}/set_notice`);
    }
    async unsetPostNotice(postId) {
        return this.request('POST', `posts/${postId}/unset_notice`);
    }
    async sharePostToChannel(postId) {
        return this.request('POST', `posts/${postId}/share`);
    }
}
exports.ChannelBoardClient = ChannelBoardClient;
class OpenChannelBoardClient extends BaseBoardClient {
    get Scheme() {
        return 'https';
    }
    get Host() {
        return 'open.kakao.com';
    }
    async requestPostList(linkId, channelId) {
        return this.request('GET', this.toOpenApiPath(linkId, `chats/${channelId.toString()}/posts`));
    }
    async getPost(linkId, postId) {
        return this.request('GET', this.toOpenApiPath(linkId, `posts/${postId}`));
    }
    async getPostEmotionList(linkId, postId) {
        return this.request('GET', this.toOpenApiPath(linkId, `posts/${postId}`));
    }
    async getPostCommentList(linkId, postId) {
        return this.request('GET', this.toOpenApiPath(linkId, `posts/${postId}/comments`));
    }
    async reactToPost(linkId, postId) {
        return this.request('POST', this.toOpenApiPath(linkId, `posts/${postId}/emotions`), { emotion: channel_post_struct_1.BoardEmotionType.LIKE });
    }
    async unreactPost(linkId, postId, reactionId) {
        return this.request('DELETE', this.toOpenApiPath(linkId, `posts/${postId}/emotions/${reactionId}`));
    }
    async commentToPost(linkId, postId, content) {
        let form = {};
        this.fillCommentForm(form, content);
        return this.request('POST', this.toOpenApiPath(linkId, `posts/${postId}/comments`), form);
    }
    async deleteComment(linkId, postId, commentId) {
        return this.request('DELETE', this.toOpenApiPath(linkId, `posts/${postId}/comments/${commentId}`));
    }
    async createPost(linkId, channelId, template) {
        let form = {};
        this.fillPostForm(form, template);
        return this.request('POST', this.toOpenApiPath(linkId, `chats/${channelId.toString()}/posts`), form);
    }
    async updatePost(linkId, postId, template) {
        let form = {};
        this.fillPostForm(form, template);
        return this.request('PUT', this.toOpenApiPath(linkId, `posts/${postId}`), form);
    }
    async deletePost(linkId, postId) {
        return this.request('DELETE', this.toOpenApiPath(linkId, `posts/${postId}`));
    }
    async setPostNotice(linkId, postId) {
        return this.request('POST', this.toOpenApiPath(linkId, `posts/${postId}/set_notice`));
    }
    async unsetPostNotice(linkId, postId) {
        return this.request('POST', this.toOpenApiPath(linkId, `posts/${postId}/unset_notice`));
    }
    async sharePostToChannel(linkId, postId) {
        return this.request('POST', this.toOpenApiPath(linkId, `posts/${postId}/share`));
    }
    toOpenApiPath(linkId, path) {
        return `moim/${path}?link_id=${linkId.toString()}`;
    }
}
exports.OpenChannelBoardClient = OpenChannelBoardClient;
//# sourceMappingURL=channel-board-client.js.map