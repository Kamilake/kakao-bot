import { SessionApiClient, RequestHeader } from "./web-api-client";
import { Long } from "bson";
import { OpenRecommendStruct, OpenPostRecommendStruct } from "../talk/struct/api/open/open-recommend-struct";
import { OpenPresetStruct } from "../talk/struct/api/open/open-preset-struct";
import { OpenPostListStruct, OpenPostReactStruct, OpenPostApiStruct, OpenPostReactNotiStruct } from "../talk/struct/api/open/open-post-struct";
import { OpenStruct } from "../talk/struct/api/open/open-struct";
import { OpenSearchType, OpenSearchStruct, OpenPostSearchStruct } from "../talk/struct/api/open/open-search-struct";
import { OpenPostTemplate } from "../talk/struct/api/open/template/open-post-template";
export declare class OpenChatClient extends SessionApiClient {
    get Scheme(): string;
    get Host(): string;
    fillHeader(header: RequestHeader): void;
    getCoverPreset(): Promise<OpenPresetStruct>;
    requestRecommend(): Promise<OpenRecommendStruct>;
    requestRecommendPostList(): Promise<OpenPostRecommendStruct>;
    requestNewReactionList(): Promise<OpenPostReactNotiStruct>;
    setRecommend(linkId: Long): Promise<OpenStruct>;
    excludeRecommend(linkId: Long): Promise<OpenStruct>;
    requestPostList(linkId: Long): Promise<OpenPostListStruct>;
    getPostFromId(linkId: Long, postId: Long, userLinkId: Long): Promise<OpenPostApiStruct>;
    getPostFromURL(postURL: string, userLinkId: Long): Promise<OpenPostApiStruct>;
    createPost(userLinkId: Long, template: OpenPostTemplate): Promise<OpenPostApiStruct>;
    updatePost(userLinkId: Long, postId: Long, template: OpenPostTemplate): Promise<OpenPostApiStruct>;
    deletePost(userLinkId: Long, postId: Long): Promise<OpenStruct>;
    reactToPost(linkId: Long, postId: Long, userLinkId: Long): Promise<OpenPostReactStruct>;
    unReactPost(linkId: Long, postId: Long, userLinkId: Long): Promise<OpenStruct>;
    searchAll(query: string, searchType?: OpenSearchType | null, page?: number, exceptLock?: boolean, count?: number): Promise<OpenSearchStruct>;
    searchPost(query: string, page?: number, count?: number): Promise<OpenPostSearchStruct>;
    createJoinLinkURL(code: string, ref?: string): string;
    static getProfileApiPath(api: string): string;
    static getChannelApiPath(api: string): string;
}
