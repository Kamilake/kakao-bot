"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionApiClient = exports.WebApiClient = void 0;
const axios_1 = require("axios");
const FormData = require("form-data");
const json_proxy_mapper_1 = require("json-proxy-mapper");
const url_1 = require("url");
const json_util_1 = require("../util/json-util");
const api_header_decorator_1 = require("./api-header-decorator");
class WebApiClient {
    constructor(configProvider) {
        this.configProvider = configProvider;
        this.basicHeader = new api_header_decorator_1.BasicHeaderDecorator(configProvider);
    }
    get ConfigProvider() {
        return this.configProvider;
    }
    get BasicHeader() {
        return this.basicHeader;
    }
    createClientHeader() {
        return { 'Host': this.Host };
    }
    fillHeader(header) {
        this.basicHeader.fillHeader(header);
    }
    toApiURL(path) {
        return `${this.Scheme}://${this.Host}/${path}`;
    }
    buildRequestData(method, headers = null) {
        let reqHeader = this.createClientHeader();
        this.fillHeader(reqHeader);
        let reqData = {
            headers: reqHeader,
            method: method,
            transformResponse: (data) => { return data; },
            responseType: 'text'
        };
        if (headers)
            Object.assign(reqHeader, headers);
        return reqData;
    }
    async request(method, path, form = null, headers = null) {
        let reqData = this.buildRequestData(method, headers);
        reqData.url = this.toApiURL(path);
        if (form) {
            let formData = this.convertToFormData(form);
            reqData.data = formData.toString();
        }
        let res = json_util_1.JsonUtil.parseLoseless((await axios_1.default.request(reqData)).data);
        return res;
    }
    async requestParams(method, path, form = null, headers = null) {
        let reqData = this.buildRequestData(method, headers);
        reqData.url = this.toApiURL(path);
        if (form) {
            let formData = this.convertToFormData(form);
            reqData.params = formData;
        }
        let res = json_util_1.JsonUtil.parseLoseless((await axios_1.default.request(reqData)).data);
        return res;
    }
    async requestMapped(method, path, mapper, form = null, headers = null) {
        let rawRes = await this.request(method, path, form, headers);
        let res = json_proxy_mapper_1.Serializer.deserialize(rawRes, mapper);
        return res;
    }
    async requestParamsMapped(method, path, mapper, form = null, headers = null) {
        let rawRes = await this.requestParams(method, path, form, headers);
        let res = json_proxy_mapper_1.Serializer.deserialize(rawRes, mapper);
        return res;
    }
    async requestMultipart(method, path, form = null, headers = null) {
        let reqData = this.buildRequestData(method, headers);
        reqData.url = this.toApiURL(path);
        if (form) {
            let formData = this.convertToMultipart(form);
            Object.assign(formData.getHeaders(), reqData.headers);
            reqData.data = formData;
        }
        let res = json_util_1.JsonUtil.parseLoseless((await axios_1.default.request(reqData)).data);
        return res;
    }
    convertToMultipart(form) {
        let formData = new FormData();
        let entries = Object.entries(form);
        for (let [key, value] of entries) {
            if (value && value.value && value.options) {
                let file = value;
                let options = { filename: file.options.filename };
                if (file.options.contentType)
                    options.contentType = file.options.contentType;
                formData.append(key, file.value, options);
            }
            else {
                formData.append(key, value + '');
            }
        }
        return formData;
    }
    convertToFormData(form) {
        let formData = new url_1.URLSearchParams();
        let entries = Object.entries(form);
        for (let [key, value] of entries) {
            formData.append(key, value + '');
        }
        return formData;
    }
}
exports.WebApiClient = WebApiClient;
class SessionApiClient extends WebApiClient {
    constructor(provider, configProvider) {
        super(configProvider);
        this.provider = provider;
    }
    fillHeader(header) {
        super.fillHeader(header);
        this.provider.fillSessionHeader(header);
    }
}
exports.SessionApiClient = SessionApiClient;
//# sourceMappingURL=web-api-client.js.map