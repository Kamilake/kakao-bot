import { SessionApiClient, RequestForm } from "./web-api-client";
import { Long } from "bson";
import { ChannelPostListStruct } from "../talk/struct/api/board/channel-post-list-struct";
import { ChannelPostReqStruct, PostType } from "../talk/struct/api/board/channel-post-struct";
import { ChannelPostCommentStruct } from "../talk/struct/api/board/channel-post-comment-struct";
import { ChannelPostEmotionStruct } from "../talk/struct/api/board/channel-post-emotion-struct";
import { ChannelBoardStruct } from "../talk/struct/api/board/channel-board-struct";
import { BoardCommentTemplate } from "../talk/struct/api/board/template/board-comment-template";
import { WebApiStruct } from "../talk/struct/web-api-struct";
import { BoardPostTemplates, BoardPostFileMap } from "../talk/struct/api/board/template/board-post-template";
export declare abstract class BaseBoardClient extends SessionApiClient {
    protected fillCommentForm(form: RequestForm, content: BoardCommentTemplate | string): void;
    protected fillFileMap(form: RequestForm, type: PostType, fileMap: BoardPostFileMap): void;
    protected fillPostForm(form: RequestForm, template: BoardPostTemplates): void;
}
export declare class ChannelBoardClient extends BaseBoardClient {
    get Scheme(): string;
    get Host(): string;
    requestPostList(channelId: Long): Promise<ChannelPostListStruct>;
    getPost(postId: string): Promise<ChannelPostReqStruct>;
    getPostEmotionList(postId: string): Promise<ChannelPostEmotionStruct>;
    getPostCommentList(postId: string): Promise<ChannelPostCommentStruct>;
    reactToPost(postId: string): Promise<ChannelPostReqStruct>;
    unreactPost(postId: string, reactionId: string): Promise<ChannelPostReqStruct>;
    commentToPost(postId: string, content: BoardCommentTemplate | string): Promise<ChannelPostReqStruct>;
    deleteComment(postId: string, commentId: string): Promise<ChannelPostReqStruct>;
    createPost(channelId: Long, template: BoardPostTemplates): Promise<ChannelPostReqStruct>;
    updatePost(postId: string, template: BoardPostTemplates): Promise<ChannelPostReqStruct>;
    deletePost(postId: string): Promise<WebApiStruct>;
    setPostNotice(postId: string): Promise<ChannelBoardStruct>;
    unsetPostNotice(postId: string): Promise<ChannelBoardStruct>;
    sharePostToChannel(postId: string): Promise<ChannelBoardStruct>;
}
export declare class OpenChannelBoardClient extends BaseBoardClient {
    get Scheme(): string;
    get Host(): string;
    requestPostList(linkId: Long, channelId: Long): Promise<ChannelPostListStruct>;
    getPost(linkId: Long, postId: string): Promise<ChannelPostReqStruct>;
    getPostEmotionList(linkId: Long, postId: string): Promise<ChannelPostEmotionStruct>;
    getPostCommentList(linkId: Long, postId: string): Promise<ChannelPostCommentStruct>;
    reactToPost(linkId: Long, postId: string): Promise<ChannelPostReqStruct>;
    unreactPost(linkId: Long, postId: string, reactionId: string): Promise<ChannelPostReqStruct>;
    commentToPost(linkId: Long, postId: string, content: BoardCommentTemplate | string): Promise<ChannelPostReqStruct>;
    deleteComment(linkId: Long, postId: string, commentId: string): Promise<ChannelPostReqStruct>;
    createPost(linkId: Long, channelId: Long, template: BoardPostTemplates): Promise<ChannelPostReqStruct>;
    updatePost(linkId: Long, postId: string, template: BoardPostTemplates): Promise<ChannelPostReqStruct>;
    deletePost(linkId: Long, postId: string): Promise<WebApiStruct>;
    setPostNotice(linkId: Long, postId: string): Promise<ChannelBoardStruct>;
    unsetPostNotice(linkId: Long, postId: string): Promise<ChannelBoardStruct>;
    sharePostToChannel(linkId: Long, postId: string): Promise<ChannelBoardStruct>;
    toOpenApiPath(linkId: Long, path: string): string;
}
