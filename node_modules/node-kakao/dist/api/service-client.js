"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceClient = void 0;
const bson_1 = require("bson");
const json_util_1 = require("../util/json-util");
const web_api_client_1 = require("./web-api-client");
class ServiceClient extends web_api_client_1.SessionApiClient {
    get Scheme() {
        return 'https';
    }
    get Host() {
        return 'katalk.kakao.com';
    }
    get Agent() {
        return this.ConfigProvider.Configuration.agent;
    }
    async canChangeUUID(uuid) {
        return this.request("POST", ServiceClient.getAccountApiPath(this.Agent, 'can_change_uuid.json'), { uuid: uuid });
    }
    async changeUUID(uuid) {
        return this.request("POST", ServiceClient.getAccountApiPath(this.Agent, 'change_uuid.json'), { uuid: uuid });
    }
    async addFriend(id, pa = '') {
        return this.request('GET', `${ServiceClient.getFriendsApiPath(this.Agent, 'add')}/${encodeURIComponent(id.toString())}.json?pa=${encodeURIComponent(pa)}`);
    }
    async addFriendWithPhoneNumber(nickname, countryIso, countryCode, phoneNumber) {
        return this.request('POST', ServiceClient.getFriendsApiPath(this.Agent, 'add_by_phonenumber.json'), { nickname: nickname, country_iso: countryIso, country_code: countryCode, phonenumber: phoneNumber });
    }
    async removeFriend(id) {
        return this.request('POST', ServiceClient.getFriendsApiPath(this.Agent, 'purge.json'), { id: id.toString() });
    }
    async removeFriendList(idList) {
        return this.request('POST', ServiceClient.getFriendsApiPath(this.Agent, 'delete.json'), { ids: json_util_1.JsonUtil.stringifyLoseless(idList) });
    }
    async hideFriend(id, pa = '') {
        return this.request('POST', ServiceClient.getFriendsApiPath(this.Agent, 'hide.json'), { id: id.toString(), pa: pa });
    }
    async unhideFriend(id) {
        return this.request('POST', ServiceClient.getFriendsApiPath(this.Agent, 'unhide.json'), { id: id.toString() });
    }
    async searchFriends(query, pageNum, pageSize) {
        if (pageNum && pageSize)
            return this.request('GET', ServiceClient.getFriendsApiPath(this.Agent, 'search.json'), { query: query, page_num: pageNum, page_size: pageSize });
        return this.request('GET', ServiceClient.getFriendsApiPath(this.Agent, 'search.json'), { query });
    }
    async findFriendById(id) {
        return this.request('GET', ServiceClient.getFriendsApiPath(this.Agent, `${id.toString()}.json`));
    }
    async findFriendByUUID(uuid) {
        return this.request('POST', `${ServiceClient.getFriendsApiPath(this.Agent, 'find_by_uuid.json')}`, { uuid: uuid });
    }
    async requestFriendList(types = ['plus', 'normal'], eventTypes = ['create'], token = bson_1.Long.ZERO) {
        return this.requestParams('GET', `${ServiceClient.getFriendsApiPath(this.Agent, 'list.json')}`, { type: JSON.stringify(types), event_types: JSON.stringify(eventTypes), token });
    }
    async setNickname(id, nickname) {
        return this.request('POST', ServiceClient.getFriendsApiPath(this.Agent, 'nickname.json'), { id: id.toString(), nickname: nickname });
    }
    async addFavoriteFriends(idList) {
        return this.request('POST', ServiceClient.getFriendsApiPath(this.Agent, 'add_favorite.json'), { ids: json_util_1.JsonUtil.stringifyLoseless(idList) });
    }
    async removeFavoriteFriend(id) {
        return this.request('POST', ServiceClient.getFriendsApiPath(this.Agent, 'remove_favorite.json'), { id: id.toString() });
    }
    async requestMusicList(id) {
        return this.request('GET', ServiceClient.getProfileApiPath(this.Agent, 'music/list.json'), { id: id.toString() });
    }
    async requestMyProfile() {
        return this.request('GET', ServiceClient.getProfile3ApiPath(this.Agent, 'me.json'));
    }
    async requestProfile(id) {
        return this.request('GET', `${ServiceClient.getProfile3ApiPath(this.Agent, 'friend_info.json')}?id=${encodeURIComponent(id.toString())}`);
    }
    async getPreviewURL(url) {
        return this.request('POST', ServiceClient.getScrapApiPath(this.Agent, 'preview.json'), { url: url });
    }
    static getAccountApiPath(agent, api) {
        return `${agent}/account/${api}`;
    }
    static getFriendsApiPath(agent, api) {
        return `${agent}/friends/${api}`;
    }
    static getProfileApiPath(agent, api) {
        return `${agent}/profile/${api}`;
    }
    static getProfile3ApiPath(agent, api) {
        return `${agent}/profile3/${api}`;
    }
    static getScrapApiPath(agent, api) {
        return `${agent}/scrap/${api}`;
    }
}
exports.ServiceClient = ServiceClient;
//# sourceMappingURL=service-client.js.map