/// <reference types="node" />
import { AxiosRequestConfig } from "axios";
import * as FormData from "form-data";
import { ObjectMapper } from "json-proxy-mapper";
import { URLSearchParams } from "url";
import { ClientConfigProvider } from "../config/client-config-provider";
import { AccessDataProvider } from "../oauth/access-data-provider";
import { StructBase, StructType } from "../talk/struct/struct-base";
import { ApiHeaderDecorator, BasicHeaderDecorator } from "./api-header-decorator";
export declare type RequestForm = {
    [key: string]: FileRequestData | StructType;
};
export declare type FileRequestData = {
    value: Buffer;
    options: {
        filename: string;
        contentType?: string;
    };
};
export declare type RequestHeader = {
    [key: string]: any;
};
export declare type Method = 'GET' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH' | 'LINK' | 'UNLINK';
export declare abstract class WebApiClient implements ApiHeaderDecorator {
    private configProvider;
    private basicHeader;
    constructor(configProvider: ClientConfigProvider);
    get ConfigProvider(): ClientConfigProvider;
    get BasicHeader(): BasicHeaderDecorator;
    protected createClientHeader(): RequestHeader;
    fillHeader(header: RequestHeader): void;
    abstract get Scheme(): string;
    abstract get Host(): string;
    toApiURL(path: string): string;
    protected buildRequestData(method: Method, headers?: RequestHeader | null): AxiosRequestConfig;
    request<T extends StructBase>(method: Method, path: string, form?: RequestForm | null, headers?: RequestHeader | null): Promise<T>;
    requestParams<T extends StructBase>(method: Method, path: string, form?: RequestForm | null, headers?: RequestHeader | null): Promise<T>;
    requestMapped<T extends StructBase>(method: Method, path: string, mapper: ObjectMapper, form?: RequestForm | null, headers?: RequestHeader | null): Promise<T>;
    requestParamsMapped<T extends StructBase>(method: Method, path: string, mapper: ObjectMapper, form?: RequestForm | null, headers?: RequestHeader | null): Promise<T>;
    requestMultipart<T extends StructBase>(method: Method, path: string, form?: RequestForm | null, headers?: RequestHeader | null): Promise<T>;
    protected convertToMultipart(form: RequestForm): FormData;
    protected convertToFormData(form: RequestForm): URLSearchParams;
}
export declare abstract class SessionApiClient extends WebApiClient {
    private provider;
    constructor(provider: AccessDataProvider, configProvider: ClientConfigProvider);
    fillHeader(header: RequestHeader): void;
}
