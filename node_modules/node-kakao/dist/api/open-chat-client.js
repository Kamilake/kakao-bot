"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenChatClient = void 0;
const web_api_client_1 = require("./web-api-client");
const open_recommend_struct_1 = require("../talk/struct/api/open/open-recommend-struct");
const open_preset_struct_1 = require("../talk/struct/api/open/open-preset-struct");
const open_post_struct_1 = require("../talk/struct/api/open/open-post-struct");
const open_search_struct_1 = require("../talk/struct/api/open/open-search-struct");
const open_link_struct_1 = require("../talk/struct/open/open-link-struct");
const json_util_1 = require("../util/json-util");
class OpenChatClient extends web_api_client_1.SessionApiClient {
    get Scheme() {
        return 'https';
    }
    get Host() {
        return 'open.kakao.com';
    }
    fillHeader(header) {
        try {
            super.fillHeader(header);
        }
        catch (e) {
            this.BasicHeader.fillHeader(header);
        }
    }
    async getCoverPreset() {
        return this.requestMapped('GET', OpenChatClient.getChannelApiPath('link/image/preset'), open_preset_struct_1.OpenPresetStruct.MAPPER);
    }
    async requestRecommend() {
        return this.requestMapped('GET', OpenChatClient.getChannelApiPath('recommend'), open_recommend_struct_1.OpenRecommendStruct.MAPPER);
    }
    async requestRecommendPostList() {
        return this.requestMapped('GET', OpenChatClient.getProfileApiPath('recommend'), open_recommend_struct_1.OpenPostRecommendStruct.MAPPER);
    }
    async requestNewReactionList() {
        return this.requestMapped('GET', OpenChatClient.getProfileApiPath('reacts/newMark'), open_post_struct_1.OpenPostReactNotiStruct.MAPPER);
    }
    async setRecommend(linkId) {
        return this.request('GET', OpenChatClient.getChannelApiPath(`search/recommend?li=${linkId.toString()}`));
    }
    async excludeRecommend(linkId) {
        return this.request('GET', OpenChatClient.getChannelApiPath(`search/exclude?li=${linkId.toString()}`));
    }
    async requestPostList(linkId) {
        return this.requestMapped('GET', OpenChatClient.getProfileApiPath(`${linkId.toString()}/posts/all`), open_post_struct_1.OpenPostListStruct.MAPPER);
    }
    async getPostFromId(linkId, postId, userLinkId) {
        return this.requestMapped('GET', OpenChatClient.getProfileApiPath(`${linkId.toString()}/posts/${encodeURIComponent(postId.toString())}?actorLinkId=${encodeURIComponent(userLinkId.toString())}`), open_post_struct_1.OpenPostApiStruct.MAPPER);
    }
    async getPostFromURL(postURL, userLinkId) {
        return this.requestMapped('GET', OpenChatClient.getProfileApiPath(`post?postUrl=${encodeURIComponent(postURL)}&actorLinkId=${encodeURIComponent(userLinkId.toString())}`), open_post_struct_1.OpenPostApiStruct.MAPPER);
    }
    async createPost(userLinkId, template) {
        let postForm = {
            description: template.text
        };
        if (template.postDataList)
            postForm['postDatas'] = json_util_1.JsonUtil.stringifyLoseless(template.postDataList);
        if (template.scrapData)
            postForm['scrapData'] = json_util_1.JsonUtil.stringifyLoseless(template.scrapData);
        if (template.shareChannelList)
            postForm['chatIds'] = json_util_1.JsonUtil.stringifyLoseless(template.shareChannelList);
        return this.requestMapped('POST', OpenChatClient.getProfileApiPath(`${encodeURIComponent(userLinkId.toString())}/posts`), open_post_struct_1.OpenPostApiStruct.MAPPER, postForm);
    }
    async updatePost(userLinkId, postId, template) {
        let postForm = {
            description: template.text
        };
        if (template.postDataList)
            postForm['postDatas'] = json_util_1.JsonUtil.stringifyLoseless(template.postDataList);
        if (template.scrapData)
            postForm['scrapData'] = json_util_1.JsonUtil.stringifyLoseless(template.scrapData);
        return this.requestMapped('PUT', OpenChatClient.getProfileApiPath(`${encodeURIComponent(userLinkId.toString())}/posts/${encodeURIComponent(postId.toString())}`), open_post_struct_1.OpenPostApiStruct.MAPPER, postForm);
    }
    async deletePost(userLinkId, postId) {
        return this.request('DELETE', OpenChatClient.getProfileApiPath(`${encodeURIComponent(userLinkId.toString())}/posts/${encodeURIComponent(postId.toString())}`));
    }
    async reactToPost(linkId, postId, userLinkId) {
        return this.requestMapped('POST', OpenChatClient.getProfileApiPath(`${linkId.toString()}/reacts/${encodeURIComponent(postId.toString())}?type=${open_link_struct_1.LinkReactionType.NORMAL}&actorLinkId=${encodeURIComponent(userLinkId.toString())}`), open_post_struct_1.OpenPostReactStruct.MAPPER);
    }
    async unReactPost(linkId, postId, userLinkId) {
        return this.request('DELETE', OpenChatClient.getProfileApiPath(`${linkId.toString()}/reacts/${encodeURIComponent(postId.toString())}?actorLinkId=${encodeURIComponent(userLinkId.toString())}`));
    }
    async searchAll(query, searchType = null, page = 1, exceptLock = false, count = 30) {
        let queries = `q=${encodeURIComponent(query)}&s=l&p=${encodeURIComponent(page)}&c=${encodeURIComponent(count)}&exceptLock=${exceptLock ? 'Y' : 'N'}`;
        if (searchType)
            queries += `&resultType=${searchType}`;
        return this.requestMapped('GET', OpenChatClient.getChannelApiPath(`search/unified?${queries}`), open_search_struct_1.OpenSearchStruct.MAPPER);
    }
    async searchPost(query, page = 1, count = 30) {
        return this.requestMapped('GET', OpenChatClient.getChannelApiPath(`search/post?q=${encodeURIComponent(query)}&p=${encodeURIComponent(page)}&c=${encodeURIComponent(count)}`), open_search_struct_1.OpenPostSearchStruct.MAPPER);
    }
    createJoinLinkURL(code, ref = 'EW') {
        return `kakaoopen://join?l=${code}&r=${ref}`;
    }
    static getProfileApiPath(api) {
        return `profile/${api}`;
    }
    static getChannelApiPath(api) {
        return `c/${api}`;
    }
}
exports.OpenChatClient = OpenChatClient;
//# sourceMappingURL=open-chat-client.js.map